Subject:  RCNVTCAT - phase 1 complete.
From:     John McKown <john.archie.mckown@gmail.com>
Date:     8/21/2016 3:27 PM
To:       Sam Golob <sbgolob@cbttape.org>

What I am calling "phase 1" of making RCNVTCAT work is complete.
Basically what the changes allow is for the REXX program to be
copied into a UNIX file; marked as executabe; then run as a
normal UNIX command. E.g at a UNIX command prompt enter:

rcnvtcat mvsuser.usercat

Transcript ===

rcnvtcat mvsuser.usercat
RCNVTCAT Report DSN: JOARMC.RCNVTCAT.REPORT.T5369
**(csi)***** Fullword processing selected
**(csi)***** Fullword processing selected
**(cat)** Processing CATALOG    MVSUSER.USERCAT
**(csi)***** Fullword processing selected
**(csi)***** Fullword processing selected
**(csi)***** Fullword processing selected
**(csi)***** Fullword processing selected
**(cat)** Processing CATALOG    MVSUSER.USERCAT
**(csi)***** Fullword processing selected
**(cat)** Processing CATALOG    MVSUSER.USERCAT
**(csi)***** Fullword processing selected
?=== Transcript ends?

As you can see, the output is still in a PDS. The program
__cannot__ be run from a PDS via the "tsocmd" UNIX command. It
still thinks that is a TSO in batch command which requires that
the output PDS be pre-allocated to the DD name REPORT. If you
try, it looks like:

Transcript ===

tsocmd "ex 'joarmc.rexx.exec(rcnvtcat)'  'mvsuser.usercat'"
ex 'joarmc.rexx.exec(rcnvtcat)'  'mvsuser.usercat'
**(Error-1)* For execution in batch, please ensure that a PDS
**(Error-2)* is pre-allocated to DD name REPORT.
=== Transcript ends?

I don't know if this is what is wanted or not.  The changed
RCNVTCAT can still be used as it is currently being used with
identical results. That it, it can be run from TSO READY, TSO
ISPF, or via TSO in batch. In addition, it could be run in batch
via the BPXBATCH command, but I don't see any reason to do this
instead of TSO in batch.

There are more changes possible, which I will list.
These might be introduced in another member, which I will
  call SCNVTCAT.

1) Replace all the TSO ALLOCATE commands with the
   equivalent BPXWDYN() calls.  This would allow two
   things: execution in TSO batch without pre-allocation
   of the REPORT DD statement and execution under UNIX via
   the "tsocmd" command shown in the second transcript.
   Actually, these are the same thing since use of the
   "tsocmd" is identical to running TSO in batch with
   SYSTSIN and SYSTSPRT basically being the user's
   terminal.  This will also allow the elimination of some
   "dual path" code which uses TSO ALLOCATE in TSO and
   BPXWDYN() in non-TSO (not that the current version even
   works correctly in non-TSO).

2) Allow the output files from the command to be placed
   in a new "random" UNIX subdirectory or in a specified
   UNIX subdirectory regardless of execution environment.
   This is meant to make the command more useful for UNIX
   shell users. I don't know why I would want a UNIX
   command to put its results in a z/OS legacy PDS where
   it would be difficult to use in UNIX.

3) Eliminate unnecessary code, such as the SWA chain
   scanning logic which is still in the program but never
   used.

I would prefer to do all three. In the case of #2, an implied
change would be that the default output of the command would be a
"random" PDS if invoked in TSO (interactive or batch) but a
"random" UNIX subdirectory if invoked by a UNIX shell
(interactive or batch = BPXBATCH or equivalent). I would allow
specification of the desired output location via a parameter.
Something like (in UNIX):

rcnvtcat mvsuser.usercat # output to "random" __NEW__ subdirectory.
rcnvtcat mvsuser.usercat -o specific.UNIX.directory
rcnvtcat mvsuser.usercat -o //some.PDS.name # use existing, create new
rcnvtcat mvsuser.usercat -o // # generate a random new PDS name,
like present

Use of the // after the -o for a z/OS data set name is fairly
standard for z/OS UNIX commands which support z/OS data sets as
input or output. I extended this a bit to have a plain // with no
DSN mean "generate a DSN".

