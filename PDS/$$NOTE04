Subject:  RCNVTCAT UNIX implementation complete.
From:     John McKown <john.archie.mckown@gmail.com>
Date:     9/6/2016 5:16 PM
To:       Sam Golob <sbgolob@cbttape.org>

Well, I think that I've done as much as I'm likely to on this for
the present.  There are a lot of interface and code changes.  I
have greatly increased the text written for the "help" option.
I've also done some minor restructuring of the code in addition
to a lot of additions. The basic functioning is completely
backward compatible.  That is, if you run the new RCNVTCAT with
the same options that you have in the past, you get (or should
get) identical results.  The main changes are the additions to
allow use as a UNIX command.  To use it as a UNIX command, the
code must be copied into a UNIX file and marked as executable.
Commands such as the following:

cd /directory/on/PATH
cp "//pds.exec(rcnvtcat)" rcnvtcat
chmod 755 rcnvtcat

One difference on running under UNIX is that the output which was
created as members in the output PDS is placed, by default, as
files in the current working directory. The names of the files
are the same as the names of the PDS members, but with a suffix
of ".txt" appended.

Help can be displayed in TSO or UNIX by simply running the
program with an argument of "?". E.g.

rcnvtcat ?

One "gotcha" for the non-UNIX aware is that in UNIX a single ?
will cause the shell to match all files in the current directory
and replace the "?" with that list of file names. So, under UNIX,
one should use somthing like:

rcnvtcat \?

Or, even better, is to abandon the historic use of ? as a "help"
argument, and use a simple -h. That is:

rcnvtcat -h

which works correctly under both TSO and UNIX.

The biggest interface change is the addition of 6 variant
arguments which allow the specification of where to put the
output. There are two "TSO inspired" variants and four "UNIX
inspired" variants. The "TSO inspired" variants are:
OUTPUT(location) and OUTPUT=location

The "UNIX inspired" variants are:
-olocation
-o location
-Olocation
-O location
<I know, UNIX is weird. Or maybe it's me.>

If an OUTPUT option is not used, then the program will first try
to put its output into the PDS defined via the REPORT DD, just as
at present. If the REPORT DD does not exist, then when under TSO,
the output goes into a "generated" PDS name as at present. But
under UNIX, it goes into the current working directory.

In the above, "location" is either a PDS (existing or not) or an
existing UNIX directory. The program determines which it is via
the following rule:

It the "location" starts with a . (period), ~ (tilde) or /
(slash), then it is a UNIX directory, otherwise it is assumed to
be a DSN. If it is a DSN, the program processes it as most TSO
command do. That is, if if is not enclosed in ' marks, then the
standard TSO prefix from the PROFILE is applied. The UNIX forms
of the location are the normal UNIX usage. That is, a period is
relative to the current working directory (which is the HOME
directory in TSO). A slash is an absolute path specification. A
tilde means relative to the HOME directory, as is implemented in
most UNIX shells. For those unused to UNIX, this means that "~/"
would mean "relative to _my_ UNIX HOME directory" and "~someid/"
would be "relative to <someid>'s UNIX HOME directory". Note that
although the command will create a PDS dynamically, any UNIX
directory specified must already exist. And, of course, in either
case, the user must have the appropriate authorities to possibly
create (non-existent PDS) & update (existing PDS or UNIX
directory) the "location".

--
Unix: Some say the learning curve is steep, but you only have to
climb it once. -- Karl Lehenbauer

Unicode: http://xkcd.com/1726/

John McKown

