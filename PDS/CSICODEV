/* REXX - CSICODEV : VSAM detail from the CSI - LISTCATalike          */
/**********************************************************************/
/* CSICODEV : Uses Catalog Search Interface (CSI)                     */
/**********************************************************************/
/* Author : Alastair Gray - a_j_gray@hotmail.com                      */
/*                 (or the e-mail I use to post on TSO-REXX/IBM-MAIN) */
/*                                                                    */
/* This was an extension of previous work that was initially derived  */
/* from the code found in 'SYS1.SAMPLIB(IGGCSIRX)'                    */
/*                                                                    */
/**********************************************************************/
/* Changes :                                                          */
/* 1.0.0   - 06/09/2002 - Alastair Gray - CSICODE full(ish) VSAM      */
/* 1.0.1   - 20/09/2002 - Alastair Gray - Added DCOLLECT details      */
/* 1.0.2   - 09/10/2002 - Alastair Gray - Minor fixes                 */
/* 1.0.3   - 09/10/2002 - Alastair Gray - Correct minor fixes!        */
/* 1.0.4   - 08/11/2002 - Alastair Gray - Fixed devtype '0000'        */
/* 1.0.5   - 14/11/2002 - Alastair Gray - Changed SYSDA to SYSALLDA   */
/* 1.0.6   - 21/11/2002 - Alastair Gray - Changed to BPXWDYN          */
/* 1.1.0   - 21/11/2002 - Alastair Gray - replaced LISTDSI function   */
/* 1.1.1   - 22/11/2002 - Alastair Gray - allowed JES seq output      */
/* 1.1.2   - 30/01/2003 - Alastair Gray - fixed PDS output bug        */
/* 1.1.3   - 03/03/2003 - Alastair Gray - allow for no-OMVS available */
/* 1.1.4   - 04/03/2003 - Alastair Gray - switched OMVS/TSO order     */
/* 1.1.5   - 05/12/2003 - Alastair Gray - Added CSIOPTNS option (Z/OS)*/
/* 1.1.6   - 09/12/2003 - Alastair Gray - Added debug code            */
/* 1.1.7   - 12/12/2003 - Alastair Gray - fixed 1st field offset      */
/* 1.1.8   - 17/12/2003 - Alastair Gray - tweaked arguments           */
/* 1.1.9   - 18/12/2003 - Alastair Gray - added DEBUG(2)              */
/* 1.2.0   - 14/01/2004 - Alastair Gray - Added fullword on/off by OS */
/**********************************************************************/
/* Notes :                                                            */
/*                                                                    */
/* This is an attempt tp provide most of the information available    */
/* for VSAM datasets with the CSI/DCOLLECT.                           */
/* It has been arranged to match LISTCAT output as far as possible    */
/* although there are some fields missing (??) and others are not     */
/* displayed in exactly the same way.                                 */
/* What it hopefully does is provide sample code for others to        */
/* build on if required.                                              */
/*                                                                    */
/**********************************************************************/
Trace O                              /* Trace Off                     */
Numeric Digits 30                    /* Set numeric digits            */
If (Address() = 'TSO') Then          /* test if under TSO             */
 Do                                  /*                               */
  x = Msg('Off')                     /* Disable messages              */
  x = Prompt('Off')                  /* Disable prompts               */
 End                                 /*                               */
/**********************************************************************/
/* extract / check and set environment variables                      */
/**********************************************************************/
cvt      = Storage(10,4)             /* get the CVT address           */
cvtpfx   = Storage(D2x(C2d(cvt)-40),16) /* get the prefix             */
mvsfmid  = Substr(cvtpfx,9,7)        /* get the mvs fmid              */
If (Substr(mvsfmid,4,4) >= 6603) Then/* test for OS/390 R3 and greater*/
 omvs_flag = 'OMVS'                  /* set OMVS flag                 */
If (Mvsvar("SYSSMS") = 'ACTIVE') Then/* test for SMS environment      */
 sms_flag = 'SMS'                    /* set SMS flag                  */
If (Address() = 'TSO') Then          /* test for tso environment      */
 tso_flag = 'TSO'                    /* set TSO flag                  */
If (tso_flag = 'TSO') Then           /* if TSO environment            */
 Do                                  /*                               */
  If (Sysvar("SYSENV") = 'FORE') Then/* test for foreground           */
   env_flag = 'FORE'                 /* set ENV flag                  */
  If (Sysvar("SYSISPF") = 'ACTIVE') Then/* test for ISPF              */
   ispf_flag = 'ISPF'                /* set ISPF flag                 */
 End                                 /*                               */
If (omvs_flag /= 'OMVS') &,          /* if no OMVS                    */
   (tso_flag /= 'TSO') Then          /* and no TSO                    */
 Do                                  /*                               */
  Say '**(Error-1)* No TSO environment and no OMVS environment.'
  Say '**(Error-2)* RCNVTCAT cannot allocate files, so terminating.'
  Signal FINISH                      /* leave the exec                */
 End                                 /*                               */
/**********************************************************************/
/* Initialise the relevant CSI variables                              */
/**********************************************************************/
cat.1 = ' '                          /* Set catalog name              */
flt   = '**'                         /* Set the filter                */
typ   = 'CGRX'                       /* Set entry types required VSAM */
ct1   = ' '                          /* Set for 1 catalog only        */
/**********************************************************************/
/* Handle passed parameters                                           */
/**********************************************************************/
Arg vals                             /* Get passed arguments          */
flt = ''                             /*                               */
Do i = 1 to Words(vals)              /* loop thru arguments           */
 testarg = Strip(Word(vals,i),B,"'") /* remove inverted commas        */
 Upper testarg                       /* convert to upper case         */
 Select                              /*                               */
  When (Substr(testarg,1,6) = 'DEBUG(') Then /* check for debug       */
   Do                                /*                               */
    debug = Substr(testarg,7,1)      /* get debug value               */
    Say '**(Debug)*** Debug level 'debug' enabled.' /*                */
   End                               /*                               */
  When (testarg = '?') Then          /*                               */
   Do                                /*                               */
    Say "CSICODEV requires a parameter"
    Say " - CSICODEV entryname     : produces LISTCAT type output"
    Signal FINISH                    /*                               */
   End                               /*                               */
  Otherwise flt = testarg            /*                               */
 End                                 /*                               */
End                                  /*                               */
If (flt = '') Then                   /* no filter passed              */
 Do                                  /*                               */
  Say '**(ent)** No entry provided for entryname.'
  Signal FINISH                      /* exit exec                     */
 End                                 /*                               */
/**********************************************************************/
/* Setup for output of reports                                        */
/**********************************************************************/
Call DSN_HANDLING
/**********************************************************************/
/* Initialise the various totals variables                            */
/**********************************************************************/
Call TOT_INIT                        /* Initialise totals             */
/**********************************************************************/
/* CSI Processing section                                             */
/**********************************************************************/
member = 'REPORT'                    /* processing ALIAS              */
x = CSI(cat.1,flt,typ,ct1)           /* Call CSI procedure            */
Call WRITE_MEMBER                    /* write-out member              */
/**********************************************************************/
/* Display output if foreground ISPF                                  */
/**********************************************************************/
If (env_flag = 'FORE') &,            /*                               */
   (ispf_flag = 'ISPF') Then         /*                               */
 Do                                  /*                               */
  x = Listdd(REPORT)                 /*                               */
  Address ISPEXEC "EDIT DATASET('"sysdsname"') VOLUME("sysvolume")"
  Address TSO "Free Fi(REPORT)"      /* free the report file          */
 End                                 /*                               */
/**********************************************************************/
/* Finish the REXX                                                    */
/**********************************************************************/
FINISH:                              /*                               */
Exit 0                               /* Exit the code                 */
/**********************************************************************/
/**********************************************************************/

/**********************************************************************/
/**********************************************************************/
CSI:                                 /* CSI procedure start         ##*/
Arg cat,flt,typ,ct1                  /* get passed arguments          */
/**********************************************************************/
/* Initialise the parameter list                                      */
/**********************************************************************/
modrsnrc = Substr(' ',1,4)           /* clear module/return/reason    */
csifiltk = Substr(flt,1,44)          /* move filter key into list     */
csicatnm = Substr(cat,1,44)          /* clear catalog name            */
csiresnm = Substr(' ',1,44)          /* clear resume name             */
csidtyps = Substr(typ,1,16)          /* clear entry types             */
csicldi  = Substr('Y',1,1)           /* indicate data and index       */
csiresum = Substr(' ',1,1)           /* clear resume flag             */
csis1cat = Substr(ct1,1,1)           /* indicate search > 1 catalogs  */
/**********************************************************************/
bcp = mvsvar('sysmvs')               /*                               */
lev = Substr(bcp,3,1)||Substr(bcp,5,1)||Substr(bcp,7,1) /*            */
If (lev > 609) Then                  /* os/390 R10 and up for fullword*/
 csioptns = Substr('F',1,1)          /*'F'for fullword,' 'for halfword*/
Else                                 /*                               */
 csioptns = Substr(' ',1,1)          /*'F'for fullword,' 'for halfword*/
/**********************************************************************/
If (csioptns = 'F') Then             /* check if fullword used        */
 Say '**(csi)***** Fullword processing selected'
Else                                 /* check if fullword used        */
 Say '**(csi)***** Halfword processing - default'
/**********************************************************************/
/* Initialise requested fields                                        */
/**********************************************************************/
csinumen = '0037'X                   /* init number of fields         */
csifld01 = Left('SECFLAGS',8)        /* security flag information     */
csifld02 = Left('ENTYPE  ',8)        /* type of entry                 */
csifld03 = Left('ENTNAME ',8)        /* name of entry                 */
csifld04 = Left('TYPE    ',8)        /* type of associated entry      */
csifld05 = Left('NAME    ',8)        /* name of associated entry      */
csifld06 = Left('OWNERID ',8)        /* Owner id                      */
csifld07 = Left('DSCRDT2 ',8)        /* Dataset creation date         */
csifld08 = Left('DSEXDT2 ',8)        /* Expiration date               */
csifld09 = Left('ATTR1   ',8)        /* Attributes                    */
csifld10 = Left('CATTR   ',8)        /* Attributes page and swap      */
csifld11 = Left('RGATTR  ',8)        /* Attributes alternate index    */
csifld12 = Left('ATTR2   ',8)        /* Attributes share              */
csifld13 = Left('OPENIND ',8)        /* open indicator                */
csifld14 = Left('BUFSIZE ',8)        /* Maximum buffer size           */
csifld15 = Left('PRIMSPAC',8)        /* Primary space allocation      */
csifld16 = Left('SCONSPAC',8)        /* Secondary space allocation    */
csifld17 = Left('SPACOPTN',8)        /* Space option flags            */
csifld18 = Left('XHARBADS',8)        /* Dataset High-allocated RBA    */
csifld19 = Left('XHURBADS',8)        /* Dataset High-used RBA         */
csifld20 = Left('LRECL   ',8)        /* Average Logical Record Size   */
csifld21 = Left('EXCPEXIT',8)        /* Exception Exit                */
csifld22 = Left('LTBACKDT',8)        /* Last backup date              */
csifld23 = Left('DATACLAS',8)        /* SMS data class                */
csifld24 = Left('STORCLAS',8)        /* SMS storage class             */
csifld25 = Left('MGMTCLAS',8)        /* SMS management class          */
csifld26 = Left('AMDKEY  ',8)        /* KSDS key details              */
csifld27 = Left('AMDCIREC',8)        /* CISIZE / MAXRECSZ             */
csifld28 = Left('DEVTYP  ',8)        /* UCB Device type               */
csifld29 = Left('VOLSER  ',8)        /* Volume serial number          */
csifld30 = Left('FILESEQ ',8)        /* File Sequence number          */
csifld31 = Left('VOLFLG  ',8)        /* Volume flags                  */
csifld32 = Left('NOEXTNT ',8)        /* Number of extents             */
csifld33 = Left('XHURBA  ',8)        /* High used RBA                 */
csifld34 = Left('XHARBA  ',8)        /* High allocated RBA            */
csifld35 = Left('XHKRBA  ',8)        /* RBA of high-key RBA           */
csifld36 = Left('XACIFLAG',8)        /* extended attribute flag       */
csifld37 = Left('PHYBLKSZ',8)        /* physical blocksize only       */
csifld38 = Left('NOBLKTRK',8)        /* physical blocks per track     */
csifld39 = Left('NOTRKAU',8)         /* tracks per allocation unit    */
csifld40 = Left('ITYPEXT',8)         /* type of extent                */
csifld41 = Left('NOBYTTRK',8)        /* number of bytes per track     */
csifld42 = Left('NOBYTAU',8)         /* bytes per allocation unit     */
csifld43 = Left('LOKEYV  ',8)        /* low key on volume             */
csifld44 = Left('HIKEYV  ',8)        /* high key on volume            */
csifld45 = Left('PASSWORD',8)        /* four 8 byte passwords         */
csifld46 = Left('USERAREC',8)        /* User authorisation record     */
csifld47 = Left('VSAMREUS',8)        /* VSAM dataset information      */
csifld48 = Left('VSAMTYPE',8)        /* VSAM dataset information      */
csifld49 = Left('UDATASIZ',8)        /* User data size                */
csifld50 = Left('LOGSTRID',8)        /* Value of LOGSTREAM parameter  */
csifld51 = Left('LOGPARMS',8)        /* Log parameters                */
csifld52 = Left('RECVTIME',8)        /* Recovery Time Local           */
csifld53 = Left('RECVTIMG',8)        /* Recovery Time GMT             */
csifld54 = Left('RLSFLAGS',8)        /* Recovery flags                */
csifld55 = Left('RLSBWO  ',8)        /* Value of BWO parm             */
/**********************************************************************/
/* Build the selection criteria fields part of parameter list         */
/**********************************************************************/
csiopts  = csicldi ||csiresum||csis1cat||csioptns
csifield = csifiltk||csicatnm||csiresnm||csidtyps||csiopts ||csinumen
csifield = csifield||csifld01||csifld02||csifld03||csifld04||csifld05
csifield = csifield||csifld06||csifld07||csifld08||csifld09||csifld10
csifield = csifield||csifld11||csifld12||csifld13||csifld14||csifld15
csifield = csifield||csifld16||csifld17||csifld18||csifld19||csifld20
csifield = csifield||csifld21||csifld22||csifld23||csifld24||csifld25
csifield = csifield||csifld26||csifld27||csifld28||csifld29||csifld30
csifield = csifield||csifld31||csifld32||csifld33||csifld34||csifld35
csifield = csifield||csifld36||csifld37||csifld38||csifld39||csifld40
csifield = csifield||csifld41||csifld42||csifld43||csifld44||csifld45
csifield = csifield||csifld46||csifld47||csifld48||csifld49||csifld50
csifield = csifield||csifld51||csifld52||csifld53||csifld54||csifld55
/**********************************************************************/
/* Initialise and build work are output part of parameter list        */
/**********************************************************************/
csiusrln = 524288                    /* CSIUSRLN work area length     */
                                     /* range from 1024 to 1048575    */
dwork = Right(D2c(csiusrln),4,'00'X)||Copies('00'X,csiusrln-4)
/**********************************************************************/
/* Initialise work variables                                          */
/**********************************************************************/
csiresum = 'Y'
/**********************************************************************/
/* Set up loop for resume (if a resume is necessary)                  */
/**********************************************************************/
Do While csiresum = 'Y'
/**********************************************************************/
/* Issue link to CSI - Catalog Search Interface                       */
/**********************************************************************/
 Address LinkPGM 'IGGCSI00 modrsnrc csifield dwork'
 r15 = rc                            /* get returned code             */
 mod = Substr(modrsnrc,1,2)          /* get module code               */
 res = C2d(Substr(modrsnrc,3,1))     /* get return code               */
 ret = C2d(Substr(modrsnrc,4,1))     /* get reason code               */
 If (r15 > 0) Then                   /* when error occured            */
  Do
   Say '**(Error-1)* CSI processing.'
   Say '**(Error-2)* R15='r15 'Module='mod' Return='ret' Reason='res
  End
/**********************************************************************/
 csiresum = Substr(csifield,150,1)   /* Get resume flag for next loop */
 csiresnm = Substr(csifield,89,44)   /* Get resume name for next loop */
 csiusrln = C2D(Substr(dwork,1,4))   /* Get length of work area       */
 csireqln = C2D(Substr(dwork,5,4))   /* Get length of work area reqd  */
 csiusdln = C2D(Substr(dwork,9,4))   /* Get length of work area used  */
 If (csireqln > csiusrln) Then       /*                               */
  Do                                 /*                               */
   Say '**(Error-1)* Work Area defined  = 'csiusrln
   Say '**(Error-2)* Work Area used     = 'csiusdln
   Say '**(Error-3)* Work Area required = 'csireqln
   Say '**(Error-4)* Increase the work area defined - CSIUSRLN.'
  End                                /*                               */
 If (csiusdln < 65) Then Leave       /* No entries returned           */
 off = 15                            /* Starting position             */
/**********************************************************************/
/* Process data returned in work area                                 */
/**********************************************************************/
 Do While off < csiusdln             /* do until all data is processed*/
  csi_flag = Substr(dwork,off,1)     /* get the flag byte             */
  csi_type = Substr(dwork,off+1,1)   /* get the entry type            */
  csi_name = Substr(dwork,off+2,44)  /* get the entry name            */
  csi_retn = Substr(dwork,off+46,4)  /* get the return code           */
  If (debug = 2) Then                /*                               */
   Do                                /*                               */
    Say 'off=<'off'>'                /*                               */
    Say 'entry =<'Substr(dwork,off,150)'>'
    Say 'entry X=<'C2x(Substr(dwork,off,150))'>'
   End                               /*                               */
  mod = Substr(csi_retn,1,2)         /* get CSI module                */
  res = C2d(Substr(csi_retn,3,1))    /* get reason code               */
  ret = C2d(Substr(csi_retn,4,1))    /* get return code               */
  If (csi_type = '0') Then           /* Catalog entry                 */
   Do                                /*                               */
    If (ret > 0) Then                /* test catalog return code      */
     Do
      Say '**(Error-1)* Catalog processing - 'Strip(csi_name,B)'.'
      Say '**(Error-2)* Module='mod' Return='ret' Reason='res
     End
    csicname = csi_name              /* set the catalog name          */
    plus = 50                        /* length for catalog entry      */
   End                               /*                               */
  Else                               /*                               */
   Do                                /*                               */
    csiename = csi_name              /* use the entry name            */
    csietype = csi_type              /* use the entry name            */
    csieflag = X2b(C2x(csi_flag))    /* use the entry flag            */
    csienter = Substr(csieflag,2,1)  /* get the entry error flag      */
    csiedata = Substr(csieflag,3,1)  /* get the data indication flag  */
    Select                           /*                               */
     When (csienter = '1') Then      /*                               */
      Do                             /*                               */
       Say '**(Error-1)* Entry processing - 'Strip(csi_name,B)'.'
       Say '**(Error-2)* Module='mod' Return='ret' Reason='res
       plus = 50                     /* length for error entry        */
      End                            /*                               */
     When (csiedata = '0') Then      /*                               */
      Do                             /*                               */
       Say '**(Error-1)* Entry processing - 'Strip(csi_name,B)'.'
       Say '**(Error-2)* No data returned'
       Say '**(Error-3)* Module='mod' Return='ret' Reason='res
       plus = 50                     /* length for error entry        */
      End                            /*                               */
     Otherwise                       /*                               */
      Do                             /*                               */
       If (csioptns = 'F') Then      /* check if fullword requested   */
        csitotln = C2d(Substr(csi_retn,1,4))/* get entry total length */
       Else                          /* otherwise (default halfword)  */
        csitotln = C2d(Substr(csi_retn,1,2))/* get entry total length */
       Call ENTRY                    /* Execute entry processing      */
       plus = 46 + csitotln          /* length for normal entry       */
      End                            /*                               */
    End                              /*                               */
   End                               /*                               */
/**********************************************************************/
/*                                                                    */
/**********************************************************************/
   Call DATA_HANDLING                /*                               */
/**********************************************************************/
/* increment for next entry                                           */
/**********************************************************************/
  off = off + plus                   /* build new offset              */
 End                                 /*                               */
End                                  /*                               */
/**********************************************************************/
/* Complete CSI Procedure                                             */
/**********************************************************************/
Return 0                             /*                               */
/**********************************************************************/

/**********************************************************************/
/* Process entry fields to extract data                               */
/**********************************************************************/
ENTRY:                               /* Start entry processing      ##*/
/**********************************************************************/
/* entry field size and location extraction                           */
/**********************************************************************/
If (csioptns = 'F') Then             /* check if fullword requested   */
 Do                                  /* field length length of 4      */
  e_off = off + 46                   /* get offset to entries         */
  o_fld.1 = e_off+8+(C2d(csinumen)*4)/* get first field offset        */
  l_fld.1 = C2d(Substr(dwork,e_off+8,4)) /* get first field length    */
  e_pos = 12                         /* set offset of second field    */
  If (debug = 1) Then                /*                               */
   Do                                /*                               */
    Say "e_off="e_off                /*                               */
    Say "C=<"Substr(dwork,e_off,200)">" /*                            */
    Say "X=<"C2x(Substr(dwork,e_off,200))">" /*                       */
    Say "o_fld.1="o_fld.1",hex="C2x(o_flds.1) /*                      */
    Say "l_fld.1="l_fld.1",hex="C2x(l_flds.1) /*                      */
   End                               /*                               */
  Do flds = 2 to C2d(csinumen)       /* loop through other fields     */
   prv = flds - 1                    /* set 'previous' value          */
   o_fld.flds = o_fld.prv + l_fld.prv/* get next offset               */
   l_fld.flds = C2d(Substr(dwork,e_off+e_pos,4)) /* get next length   */
   e_pos = e_pos + 4                 /*                               */
   If (debug = 1) Then               /*                               */
    Do                               /*                               */
     Say "o_fld."flds"="o_fld.flds",hex="C2x(o_flds.flds) /*          */
     Say "l_fld."flds"="l_fld.flds",hex="C2x(l_flds.flds) /*          */
    End                              /*                               */
  End                                /*                               */
 End                                 /*                               */
Else                                 /* otherwise (default halfword)  */
/**********************************************************************/
 Do                                  /* field length length of 4      */
  e_off = off + 46                   /* get offset to entries         */
  o_fld.1 = e_off+4+(C2d(csinumen)*2)/* get first field offset        */
  l_fld.1 = C2d(Substr(dwork,e_off+4,2)) /* get first field length    */
  e_pos = 6                          /* set offset of second field    */
  If (debug = 1) Then                /*                               */
   Do                                /*                               */
    Say "e_off="e_off                /*                               */
    Say "C=<"Substr(dwork,e_off,200)">" /*                            */
    Say "X=<"C2x(Substr(dwork,e_off,200))">" /*                       */
    Say "o_fld.1="o_fld.1",hex="C2x(o_flds.1) /*                      */
    Say "l_fld.1="l_fld.1",hex="C2x(l_flds.1) /*                      */
   End                               /*                               */
  Do flds = 2 to C2d(csinumen)       /* loop through other fields     */
   prv = flds - 1                    /* set 'previous' value          */
   o_fld.flds = o_fld.prv + l_fld.prv/* get next offset               */
   l_fld.flds = C2d(Substr(dwork,e_off+e_pos,2)) /* get next length   */
   e_pos = e_pos + 2                 /*                               */
   If (debug = 1) Then               /*                               */
    Do                               /*                               */
     Say "o_fld."flds"="o_fld.flds",hex="C2x(o_flds.flds) /*          */
     Say "l_fld."flds"="l_fld.flds",hex="C2x(l_flds.flds) /*          */
    End                              /*                               */
  End                                /*                               */
 End                                 /*                               */
/**********************************************************************/
/* entry field extraction                                             */
/**********************************************************************/
secflags = Substr(dwork,o_fld.1,l_fld.1)   /* security flag info      */
entype   = Substr(dwork,o_fld.2,l_fld.2)   /* type of entry           */
entname  = Substr(dwork,o_fld.3,l_fld.3)   /* name of entry           */
type     = Substr(dwork,o_fld.4,l_fld.4)   /* type of associated entry*/
name     = Substr(dwork,o_fld.5,l_fld.5)   /* name of associated entry*/
ownerid  = Substr(dwork,o_fld.6,l_fld.6)   /* Owner id                */
dscrdt2  = Substr(dwork,o_fld.7,l_fld.7)   /* Dataset creation date   */
dsexdt2  = Substr(dwork,o_fld.8,l_fld.8)   /* Expiration date         */
attr1    = Substr(dwork,o_fld.9,l_fld.9)   /* Attributes              */
cattr    = Substr(dwork,o_fld.10,l_fld.10) /* Attributes page and swap*/
rgattr   = Substr(dwork,o_fld.11,l_fld.11) /* Attributes alternate ind*/
attr2    = Substr(dwork,o_fld.12,l_fld.12) /* Attributes share        */
openind  = Substr(dwork,o_fld.13,l_fld.13) /* open indicator          */
bufsize  = Substr(dwork,o_fld.14,l_fld.14) /* Maximum buffer size     */
primspac = Substr(dwork,o_fld.15,l_fld.15) /* Primary space allocation*/
sconspac = Substr(dwork,o_fld.16,l_fld.16) /* Secondary space allocati*/
spacoptn = Substr(dwork,o_fld.17,l_fld.17) /* Space option flags      */
xharbads = Substr(dwork,o_fld.18,l_fld.18) /* Dataset High-allocated R*/
xhurbads = Substr(dwork,o_fld.19,l_fld.19) /* Dataset High-used RBA   */
lrecl    = Substr(dwork,o_fld.20,l_fld.20) /* Average logical rec size*/
excpexit = Substr(dwork,o_fld.21,l_fld.21) /* Exception Exit          */
ltbackdt = Substr(dwork,o_fld.22,l_fld.22) /* Last backup date        */
dataclas = Substr(dwork,o_fld.23,l_fld.23) /* SMS data class          */
storclas = Substr(dwork,o_fld.24,l_fld.24) /* SMS storage class       */
mgmtclas = Substr(dwork,o_fld.25,l_fld.25) /* SMS management class    */
amdkey   = Substr(dwork,o_fld.26,l_fld.26) /* KSDS key details        */
amdcirec = Substr(dwork,o_fld.27,l_fld.27) /* CISIZE / MAXRECSZ       */
devtyp   = Substr(dwork,o_fld.28,l_fld.28) /* UCB Device type         */
volser   = Substr(dwork,o_fld.29,l_fld.29) /* Volume serial number    */
fileseq  = Substr(dwork,o_fld.30,l_fld.30) /* File Sequence number    */
volflg   = Substr(dwork,o_fld.31,l_fld.31) /* Volume flags            */
noextnt  = Substr(dwork,o_fld.32,l_fld.32) /* Number of extents       */
xhurba   = Substr(dwork,o_fld.33,l_fld.33) /* High used RBA           */
xharba   = Substr(dwork,o_fld.34,l_fld.34) /* High allocated RBA      */
xhkrba   = Substr(dwork,o_fld.35,l_fld.35) /* RBA of high-key RBA     */
xaciflag = Substr(dwork,o_fld.36,l_fld.36) /* extended attribute flag */
phyblksz = Substr(dwork,o_fld.37,l_fld.37) /* physical blocksize only */
noblktrk = Substr(dwork,o_fld.38,l_fld.38) /* physical blocks per trk */
notrkau  = Substr(dwork,o_fld.39,l_fld.39) /* tracks per alloctn unit */
itypext  = Substr(dwork,o_fld.40,l_fld.40) /* type of extent          */
nobyttrk = Substr(dwork,o_fld.41,l_fld.41) /* no of bytes per track   */
nobytau  = Substr(dwork,o_fld.42,l_fld.42) /* bytes per alloctn unit  */
lokeyv   = Substr(dwork,o_fld.43,l_fld.43) /* low key on volume       */
hikeyv   = Substr(dwork,o_fld.44,l_fld.44) /* high key on volume      */
password = Substr(dwork,o_fld.45,l_fld.45) /* four 8 byte passwords   */
userarec = Substr(dwork,o_fld.46,l_fld.46) /* user authorisation rec  */
vsamreus = Substr(dwork,o_fld.47,l_fld.47) /* VSAM dataset information*/
vsamtype = Substr(dwork,o_fld.48,l_fld.48) /* VSAM dataset information*/
udatasiz = Substr(dwork,o_fld.49,l_fld.49) /* user data size          */
logstrid = Substr(dwork,o_fld.50,l_fld.50) /* Value of LOGSTREAM param*/
logparms = Substr(dwork,o_fld.51,l_fld.51) /* Log parameters          */
recvtime = Substr(dwork,o_fld.52,l_fld.52) /* Recovery Time Local     */
recvtimg = Substr(dwork,o_fld.53,l_fld.53) /* Recovery Time GMT       */
rlsflags = Substr(dwork,o_fld.54,l_fld.54) /* Recovery flags          */
rlsbwo   = Substr(dwork,o_fld.55,l_fld.55) /* Value of BWO parm       */
/**********************************************************************/
/* entry re-processing section                                        */
/**********************************************************************/
vsam_attr = ''                           /* initialise vsam attributes*/
If (Index(csifield,'SECFLAGS') > 0) Then /*                           */
 Call FLD_SECFLAGS                       /*                           */
If (Index(csifield,'ENTYPE') > 0) Then   /*                           */
 Call FLD_ENTYPE                         /*                           */
If (Index(csifield,'ENTNAME') > 0) Then  /*                           */
 Call FLD_ENTNAME                        /*                           */
If (Index(csifield,'TYPE') > 0) Then     /*                           */
 Call FLD_TYPE                           /*                           */
If (Index(csifield,'GDGLIMIT') > 0) Then /*                           */
 Call FLD_GDGLIMIT                       /*                           */
If (Index(csifield,'GDGATTR') > 0) Then  /*                           */
 Call FLD_GDGATTR                        /*                           */
If (Index(csifield,'OWNERID') > 0) Then  /*                           */
 Call FLD_OWNERID                        /*                           */
If (Index(csifield,'DSCRDT2') > 0) Then  /*                           */
 Call FLD_DSCRDT2                        /*                           */
If (Index(csifield,'DSEXDT2') > 0) Then  /*                           */
 Call FLD_DSEXDT2                        /*                           */
If (Index(csifield,'ATTR1') > 0) Then    /*                           */
 Call FLD_ATTR1                          /*                           */
If (Index(csifield,'CATTR') > 0) Then    /* must be after ENTYPE      */
 Call FLD_CATTR                          /*                           */
If (Index(csifield,'ATTR2') > 0) Then    /*                           */
 Call FLD_ATTR2                          /*                           */
If (Index(csifield,'BUFSIZE') > 0) Then  /*                           */
 Call FLD_BUFSIZE                        /*                           */
If (Index(csifield,'PRIMSPAC') > 0) Then /*                           */
 Call FLD_PRIMSPAC                       /*                           */
If (Index(csifield,'SCONSPAC') > 0) Then /*                           */
 Call FLD_SCONSPAC                       /*                           */
If (Index(csifield,'SPACOPTN') > 0) Then /*                           */
 Call FLD_SPACOPTN                       /*                           */
If (Index(csifield,'XHARBADS') > 0) Then /*                           */
 Call FLD_XHARBADS                       /*                           */
If (Index(csifield,'XHURBADS') > 0) Then /*                           */
 Call FLD_XHURBADS                       /*                           */
If (Index(csifield,'LRECL') > 0) Then    /*                           */
 Call FLD_LRECL                          /*                           */
If (Index(csifield,'EXCPEXIT') > 0) Then /*                           */
 Call FLD_EXCPEXIT                       /*                           */
If (Index(csifield,'LTBACKDT') > 0) Then /*                           */
 Call FLD_LTBACKDT                       /*                           */
If (Index(csifield,'DATACLAS') > 0) Then /*                           */
 Call FLD_DATACLAS                       /*                           */
If (Index(csifield,'STORCLAS') > 0) Then /*                           */
 Call FLD_STORCLAS                       /*                           */
If (Index(csifield,'MGMTCLAS') > 0) Then /*                           */
 Call FLD_MGMTCLAS                       /*                           */
If (Index(csifield,'AMDKEY') > 0) Then   /*                           */
 Call FLD_AMDKEY                         /*                           */
If (Index(csifield,'AMDCIREC') > 0) Then /*                           */
 Call FLD_AMDCIREC                       /*                           */
If (Index(csifield,'DEVTYP') > 0) Then   /*                           */
 Call FLD_DEVTYP                         /*                           */
If (Index(csifield,'VOLSER') > 0) Then   /*                           */
 Call FLD_VOLSER                         /*                           */
If (Index(csifield,'FILESEQ') > 0) Then  /*                           */
 Call FLD_FILESEQ                        /*                           */
If (Index(csifield,'VOLFLG') > 0) Then   /*                           */
 Call FLD_VOLFLG                         /*                           */
If (Index(csifield,'NOEXTNT') > 0) Then  /*                           */
 Call FLD_NOEXTNT                        /*                           */
If (Index(csifield,'XHKRBA') > 0) Then   /*                           */
 Call FLD_XHKRBA                         /*                           */
If (Index(csifield,'XHURBA') > 0) Then   /*                           */
 Call FLD_XHURBA                         /*                           */
If (Index(csifield,'XHARBA') > 0) Then   /*                           */
 Call FLD_XHARBA                         /*                           */
If (Index(csifield,'PHYBLKSZ') > 0) Then /*                           */
 Call FLD_PHYBLKSZ                       /*                           */
If (Index(csifield,'NOBLKTRK') > 0) Then /*                           */
 Call FLD_NOBLKTRK                       /*                           */
If (Index(csifield,'NOTRKAU') > 0) Then  /*                           */
 Call FLD_NOTRKAU                        /*                           */
If (Index(csifield,'ITYPEXT') > 0) Then  /*                           */
 Call FLD_ITYPEXT                        /*                           */
If (Index(csifield,'USERAREC') > 0) Then /*                           */
 Call FLD_USERAREC                       /*                           */
If (Index(csifield,'VSAMTYPE') > 0) Then /*                           */
 Call FLD_VSAMTYPE                       /*                           */
If (Index(csifield,'VSAMREUS') > 0) Then /* must be after VSAMTYPE    */
 Call FLD_VSAMREUS                       /*                           */
If (Index(csifield,'UDATASIZ') > 0) Then /*                           */
 Call FLD_UDATASIZ                       /*                           */
If (Index(csifield,'LOGSTRID') > 0) Then /*                           */
 Call FLD_LOGSTRID                       /*                           */
If (Index(csifield,'LOGPARMS') > 0) Then /*                           */
 Call FLD_LOGPARMS                       /*                           */
If (Index(csifield,'RLSFLAGS') > 0) Then /*                           */
 Call FLD_RLSFLAGS                       /*                           */
If (Index(csifield,'RLSBWO') > 0) Then   /*                           */
 Call FLD_RLSBWO                         /*                           */
Call DCOL_PROC                           /* DCOLLECT Processing       */
/**********************************************************************/
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_SECFLAGS - Process SECFLAGS field                              */
/**********************************************************************/
FLD_SECFLAGS:                        /* SECFLAGS field processing   ##*/
If (secflags = '80'x) Then           /*                               */
 secflags = '(YES)'                  /*                               */
Else                                 /*                               */
 secflags = '(NO)'                   /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTYPE   - Process ENTYPE   field                              */
/**********************************************************************/
FLD_ENTYPE:                          /* ENTYPE   field processing   ##*/
Select                               /* decode type flag              */
 When (entype = 'C') Then entype = 'CLUSTER'  /*                      */
 When (entype = 'D') Then entype = 'DATA'     /*                      */
 When (entype = 'I') Then entype = 'INDEX'    /*                      */
 When (entype = 'A') Then entype = 'NONVSAM'  /*                      */
 When (entype = 'H') Then entype = 'GDS'      /*                      */
 When (entype = 'B') Then entype = 'GDG'      /*                      */
 When (entype = 'R') Then entype = 'PATH'     /*                      */
 When (entype = 'G') Then entype = 'AIX'      /*                      */
 When (entype = 'X') Then entype = 'ALIAS'    /*                      */
 When (entype = 'U') Then entype = 'UCAT'     /*                      */
 Otherwise                           /*                               */
  Say '**(Error-1)* Entry type processing for 'Strip(entname,T)
  Say '**(Error-2)* Entry type ='entype' X=<'C2x(entype)'>'
  entype = ' '                       /* unknown type                  */
End                                  /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTNAME  - Process ENTNAME  field                              */
/**********************************************************************/
FLD_ENTNAME:                         /* ENTNAME  field processing   ##*/
If (Substr(entname,1,2) = '0000'x) Then /* If blank dsname            */
 entname = Left(C2x(entname),44)     /* Return hex value              */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_TYPE     - Process TYPE     field                              */
/**********************************************************************/
FLD_TYPE:                            /* TYPE     field processing   ##*/
type_list = ''                       /* loop through type             */
Do z = 1 to Length(type)             /* loop through type             */
 astype = Substr(type,z,1)           /* decode type flag              */
 Select                              /* decode type flag              */
  When (astype = 'C') Then astype = 'CLUSTER'  /*                     */
  When (astype = 'D') Then astype = 'DATA'     /*                     */
  When (astype = 'I') Then astype = 'INDEX'    /*                     */
  When (astype = 'A') Then astype = 'NONVSAM'  /*                     */
  When (astype = 'H') Then astype = 'GDS'      /*                     */
  When (astype = 'B') Then astype = 'GDG'      /*                     */
  When (astype = 'R') Then astype = 'PATH'     /*                     */
  When (astype = 'G') Then astype = 'AIX'      /*                     */
  When (astype = 'X') Then astype = 'ALIAS'    /*                     */
  When (astype = 'U') Then astype = 'UCAT'     /*                     */
  Otherwise                          /*                               */
   Say '**(Error-1)* Entry type processing for 'Strip(entname,T)
   Say '**(Error-2)* Entry type ='astype' X=<'C2x(astype)'>'
   astype = '@'                      /* unknown type                  */
 End                                 /*                               */
 type_list = type_list' 'astype      /*                               */
End                                  /*                               */
type = Strip(type_list,L)            /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_GDGLIMIT - Process GDGLIMIT field                              */
/**********************************************************************/
FLD_GDGLIMIT:                        /* GDGLIMIT field processing   ##*/
gdglimit = X2d(C2x(gdglimit))        /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_GDGATTR  - Process GDGATTR  field                              */
/**********************************************************************/
FLD_GDGATTR:                         /* GDGATTR  field processing   ##*/
gdgattr = X2b(C2x(gdgattr))          /*                               */
If (Substr(gdgattr,1,1) = '1') Then  /*                               */
 gdg_emp = 'EMPTY'                   /*                               */
Else                                 /*                               */
 gdg_emp = 'NOEMPTY'                 /*                               */
If (Substr(gdgattr,2,1) = '1') Then  /*                               */
 gdg_scr = 'SCRATCH'                 /*                               */
Else                                 /*                               */
 gdg_scr = 'NOSCRATCH'               /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_OWNERID  - Process OWNERID  field                              */
/**********************************************************************/
FLD_OWNERID:                         /* OWNERID  field processing   ##*/
If (Substr(ownerid,1,2) = 'FFFF'x) Then /* If blank ownerid           */
 ownerid = '(NULL)'                  /* set to null                   */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_DSCRDT2  - Process DSCRDT2  field                              */
/**********************************************************************/
FLD_DSCRDT2:                         /* DSCRDT2  field processing   ##*/
If (Substr(dscrdt2,1,2) /= 'FFFF'X) Then
 Do                                  /*                               */
  yyddd = C2x(Substr(dscrdt2,1,3))   /*                               */
  yy    = Substr(yyddd,1,2)          /*                               */
  ddd   = Substr(yyddd,3,3)          /*                               */
  cent  = C2x(Substr(dscrdt2,4,1))   /*                               */
  If (cent = '00') Then              /*                               */
   yyyy    = yy + 1900               /*                               */
  Else                               /*                               */
   yyyy    = yy + 2000               /*                               */
  If (yyyy = '1900') Then            /* correct for '00'              */
   yyyy = '2000'                     /*                               */
  savcrdt2 = dscrdt2
  dscrdt2 = yyyy'.'ddd               /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_DSEXDT2  - Process DSEXDT2  field                              */
/**********************************************************************/
FLD_DSEXDT2:                         /* DSEXDT2  field processing   ##*/
If (Substr(dsexdt2,1,2) /= 'FFFF'X) Then
 Do                                  /*                               */
  yyddd = C2x(Substr(dsexdt2,1,3))   /*                               */
  yy    = Substr(yyddd,1,2)          /*                               */
  ddd   = Substr(yyddd,3,3)          /*                               */
  cent  = C2x(Substr(dsexdt2,4,1))   /*                               */
  If (cent = '00') Then              /*                               */
   yyyy    = yy + 1900               /*                               */
  Else                               /*                               */
   yyyy    = yy + 2000               /*                               */
  If (yyyy = '1900') Then            /* correct for '00'              */
   yyyy = '2000'                     /*                               */
  dsexdt2 = yyyy'.'ddd               /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ATTR1    - Process ATTR1    field                              */
/**********************************************************************/
FLD_ATTR1:                           /* ATTR1    field processing   ##*/
attr1 = X2b(c2x(attr1))              /*                               */
If (Substr(attr1,1,1) = '1') Then    /*                               */
 vsam_attr = vsam_attr' SPEED'       /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' RECOVERY'    /*                               */
If (Substr(attr1,2,1) = '1') Then    /*                               */
 vsam_attr = vsam_attr' UNIQUE'      /*                               */
If (Substr(attr1,3,1) = '1') Then    /*                               */
 vsam_attr = vsam_attr' REUSE'       /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOREUSE'     /*                               */
If (Substr(attr1,4,1) = '1') Then    /*                               */
 vsam_attr = vsam_attr' ERASE'       /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOERASE'     /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_CATTR    - Process CATTR    field                              */
/**********************************************************************/
FLD_CATTR:                           /* CATTR    field processing   ##*/
cattr = X2b(C2x(cattr))              /*                               */
If (entype = 'CLUSTER') Then         /*                               */
 Do                                  /*                               */
  If (Substr(cattr,8,1) = '1') Then  /*                               */
   entype = 'PAGESPACE'              /*                               */
  If (Substr(cattr,7,1) = '1') Then  /*                               */
   pageswap = 'SWAP'                 /*                               */
  Else                               /*                               */
   pageswap = 'NOSWAP'               /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ATTR2    - Process ATTR2    field                              */
/**********************************************************************/
FLD_ATTR2:                           /* ATTR2    field processing   ##*/
attr2 = X2b(c2x(attr2))              /*                               */
region = Substr(attr2,1,2)           /*                               */
system = Substr(attr2,3,2)           /*                               */
region = b2x(region) + 1             /*                               */
system = b2x(system) + 1             /*                               */
attr2 = region','system              /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_BUFSIZE  - Process BUFSIZE  field                              */
/**********************************************************************/
FLD_BUFSIZE:                         /* BUFSIZE  field processing   ##*/
If (Substr(bufsize,1,2) /= 'FFFF'x) Then
 Do                                  /*                               */
  bufsize = C2d(bufsize)             /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_PRIMSPAC - Process PRIMSPAC field                              */
/**********************************************************************/
FLD_PRIMSPAC:                        /* PRIMSPAC field processing   ##*/
If (Substr(primspac,1,2) /= 'FFFF'x) Then
 Do                                  /*                               */
  primspac = C2d(primspac)           /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_SCONSPAC - Process SCONSPAC field                              */
/**********************************************************************/
FLD_SCONSPAC:                        /* SCONSPAC field processing   ##*/
If (Substr(sconspac,1,2) /= 'FFFF'x) Then
 Do                                  /*                               */
  sconspac = C2d(sconspac)           /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_SPACOPTN - Process SPACOPTN field                              */
/**********************************************************************/
FLD_SPACOPTN:                        /* SPACOPTN field processing   ##*/
spacoptn = X2b(C2x(spacoptn))        /* show binary flags             */
Select                               /*                               */
 When (Substr(spacoptn,1,1) = 1) Then/*                               */
  spacoptn = 'TRACKS'                /*                               */
 When (Substr(spacoptn,8,1) = 1) Then/*                               */
  spacoptn = 'RECORDS'               /*                               */
 Otherwise spacoptn = 'CYLINDERS'    /*                               */
End                                  /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_XHARBADS - Process XHARBADS field                              */
/**********************************************************************/
FLD_XHARBADS:                        /* XHARBADS field processing   ##*/
If (Substr(xharbads,1,2) /= 'FFFF'x) Then
 xharbads = C2d(xharbads)            /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_XHURBADS - Process XHURBADS field                              */
/**********************************************************************/
FLD_XHURBADS:                        /* XHURBADS field processing   ##*/
If (Substr(xhurbads,1,2) /= 'FFFF'x) Then
 xhurbads = C2d(xhurbads)            /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_LRECL    - Process LRECL    field                              */
/**********************************************************************/
FLD_LRECL:                           /* LRECL    field processing   ##*/
If (Substr(lrecl,1,2) /= 'FFFF'x) Then
 Do                                  /*                               */
  lrecl = C2d(lrecl)                 /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_EXCPEXIT - Process EXCPEXIT field                              */
/**********************************************************************/
FLD_EXCPEXIT:                        /* EXCPEXIT field processing   ##*/
If (Substr(excpexit,1,2) = 'FFFF'x) Then
 excpexit = '(NULL)'                 /* no value set                  */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_LTBACKDT - Process LTBACKDT field                              */
/**********************************************************************/
FLD_LTBACKDT:                        /* LTBACKDT field processing   ##*/
bit1 = C2d(Substr(ltbackdt,1,4))
bit2 = C2d(Substr(ltbackdt,5,4))
ltbackdt = ltbackdt||C2x(ltbackdt)   /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_DATACLAS - Process DATACLAS field                              */
/**********************************************************************/
FLD_DATACLAS:                        /* DATACLAS field processing   ##*/
length = C2d(Substr(dataclas,1,2))   /*                               */
If (length = 0) Then                 /* no value set                  */
 dataclas = '(NULL)'                 /* set to null                   */
Else                                 /* set to null                   */
 dataclas = Substr(dataclas,3,length)/* get value                     */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_STORCLAS - Process STORCLAS field                              */
/**********************************************************************/
FLD_STORCLAS:                        /* STORCLAS field processing   ##*/
length = C2d(Substr(storclas,1,2))   /*                               */
If (length = 0) Then                 /* no value set                  */
 storclas = '(NULL)'                 /* set to null                   */
Else                                 /* set to null                   */
 storclas = Substr(storclas,3,length)/* get value                     */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_MGMTCLAS - Process MGMTCLAS field                              */
/**********************************************************************/
FLD_MGMTCLAS:                        /* MGMTCLAS field processing   ##*/
length = C2d(Substr(mgmtclas,1,2))   /*                               */
If (length = 0) Then                 /* no value set                  */
 mgmtclas = '(NULL)'                 /* set to null                   */
Else                                 /* set to null                   */
 mgmtclas = Substr(mgmtclas,3,length)/* get value                     */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_AMDKEY   - Process AMDKEY   field                              */
/**********************************************************************/
FLD_AMDKEY:                          /* AMDKEY   field processing   ##*/
rkp    = C2d(Substr(amdkey,1,2))     /*                               */
keylen = C2d(Substr(amdkey,3,2))     /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_AMDCIREC - Process AMDCIREC field                              */
/**********************************************************************/
FLD_AMDCIREC:                        /* AMDCIREC field processing   ##*/
If (Length(amdcirec) > 0) Then
 Do
  cisize = C2d(Substr(amdcirec,1,4)) /* CISIZE                        */
  maxrcsz = C2d(Substr(amdcirec,5,4))/* Maximum record size           */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_DEVTYP   - Process DEVTYP   field to translate data            */
/**********************************************************************/
FLD_DEVTYP:                          /* DEVTYP   field processing   ##*/
devices = ''                         /* initialise devices            */
Do d_pos = 1 to Length(devtyp) By 4  /* loop thru devtyp field        */
 device   = Substr(devtyp,d_pos,4)   /* get device (UCB)              */
 d_model  = Substr(device,1,1)       /* get model byte                */
 d_option = Substr(device,2,1)       /* get option byte               */
 d_class  = Substr(device,3,1)       /* get class byte                */
 d_device = Substr(device,4,1)       /* get device byte               */
 Select                              /*                               */
  When (d_class = '80'x) Then        /*                               */
   Do                                /*                               */
    dev_class = 'TAPE'               /* Tape device                   */
    Select                           /*                               */
     When (d_device = '03'x) Then dev_type = '3400' /* 3400/3420-3/5/7*/
     When (d_device = '04'x) Then dev_type = '3420' /* 3420-4/6/8     */
     When (d_device = '05'x) Then dev_type = '3410' /*                */
     When (d_device = '06'x) Then dev_type = '8809' /*                */
     When (d_device = '07'x) Then dev_type = '3430' /*                */
     When (d_device = '08'x) Then dev_type = '7340' /*                */
     When (d_device = '09'x) Then dev_type = '9374' /*                */
     When (d_device = '80'x) Then dev_type = '3480' /*                */
     When (d_device = '81'x) Then dev_type = '3490' /*                */
     When (d_device = '83'x) Then dev_type = '3590' /*                */
     When (device = '00000000'x) Then dev_type = '0000'     /*        */
     Otherwise                       /*                               */
      dev_type = C2x(device)         /* show UCB if unknown           */
      Say '**(Error-1)* Device type processing for 'Strip(entname,T)
      Say '**(Error-2)* Device type = 'dev_type
    End                              /*                               */
   End                               /*                               */
  When (d_class = '20'x) Then        /*                               */
   Do                                /*                               */
    dev_class = 'DASD'               /* DASD device                   */
    Select                           /*                               */
     When (d_device = '04'x) Then dev_type = '9345' /*                */
     When (d_device = '09'x) Then dev_type = '3330' /*                */
     When (d_device = '0A'x) Then dev_type = '3340' /*                */
     When (d_device = '0B'x) Then dev_type = '3350' /*                */
     When (d_device = '0C'x) Then dev_type = '3375' /*                */
     When (d_device = '0D'x) Then dev_type = '3330' /* 3330-11        */
     When (d_device = '0E'x) Then dev_type = '3380' /*                */
     When (d_device = '0F'x) Then dev_type = '3390' /*                */
     When (device = '00000000'x) Then dev_type = '0000'     /*        */
     Otherwise                       /*                               */
      dev_type = C2x(device)         /* show UCB if unknown           */
      Say '**(Error-1)* Device type processing for 'Strip(entname,T)
      Say '**(Error-2)* Device type = 'dev_type
    End                              /*                               */
   End
  Otherwise                          /*                               */
   Do                                /*                               */
    dev_class = 'UNKN'               /* Unknown device                */
    Select                           /*                               */
     When (device = '00000000'x) Then dev_type = '0000' /*            */
     Otherwise                       /*                               */
      dev_type = C2x(device)         /* show UCB if unknown           */
      Say '**(Error-1)* Device type processing for 'Strip(entname,T)
      Say '**(Error-2)* Device type = 'dev_type
    End                              /*                               */
   End
 End                                 /*                               */
 devices = devices||' '||Left(dev_type,8) /* build device list        */
End                                  /*                               */
devices = Strip(devices,B,' ')       /* clean up device list          */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_VOLSER   - Process VOLSER   field                              */
/**********************************************************************/
FLD_VOLSER:                          /* VOLSER   field processing   ##*/
volsers = ''                         /*                               */
Do v_pos = 1 To Length(volser) By 6  /*                               */
 volume = Substr(volser,v_pos,6)     /*                               */
 If (Substr(volume,1,2) = '00'x) Then/*                               */
  volume = '000000'                  /*                               */
 volume = Right(Strip(volume,B),6)' '/*                               */
 volsers = volsers||'  '||volume     /*                               */
End                                  /*                               */
volser = Strip(volsers,B)            /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_FILESEQ  - Process FILESEQ  field                              */
/**********************************************************************/
FLD_FILESEQ:                         /* FILESEQ  field processing   ##*/
build = ''                           /*                               */
Do f_pos = 1 To Length(fileseq) By 2 /*                               */
 build = build||Right(X2d(C2x(Substr(fileseq,f_pos,2))),8)||' '
End                                  /*                               */
fileseq = build                      /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_VOLFLG   - Process VOLFLG   field                              */
/**********************************************************************/
FLD_VOLFLG:                          /* VOLFLG   field processing   ##*/
build = ''
Do f_pos = 1 To Length(volflg) By 1  /*                               */
 flag = X2b(C2x(Substr(volflg,f_pos,1)))
 Select
  When (Substr(flag,1,1) = '1') Then
   flg_t = 'PRIME'
  When (Substr(flag,2,1) = '1') Then
   flg_t = 'CANDIDATE'
  When (Substr(flag,3,1) = '1') Then
   flg_t = 'OVERFLOW'
  Otherwise flg_t = flag
 End
 build = build||flg_t||' '
End                                  /*                               */
volflg = build                       /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_NOEXTNT  - Process NOEXTNT  field                              */
/**********************************************************************/
FLD_NOEXTNT:                         /* NOEXTNT  field processing   ##*/
build = ''
Do e_pos = 1 To Length(noextnt) By 1 /*                               */
 build = build||C2d(Substr(noextnt,e_pos,1))||' '
End                                  /*                               */
noextnt = build                      /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_XHKRBA   - Process XHKRBA   field                              */
/**********************************************************************/
FLD_XHKRBA:                          /* XHKRBA   field processing   ##*/
If (Substr(xhkrba,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do k_pos = 1 To Length(xhkrba) By 8 /*                              */
   build = build||C2d(Substr(xhkrba,k_pos,8))||' '
  End                                /*                               */
  xhkrba = build                     /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_XHURBA   - Process XHURBA   field                              */
/**********************************************************************/
FLD_XHURBA:                          /* XHURBA   field processing   ##*/
If (Substr(xhurba,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do u_pos = 1 To Length(xhurba) By 8 /*                              */
   build = build||C2d(Substr(xhurba,u_pos,8))||' '
  End                                /*                               */
  xhurba = build                     /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_XHARBA   - Process XHARBA   field                              */
/**********************************************************************/
FLD_XHARBA:                          /* XHARBA   field processing   ##*/
If (Substr(xharba,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do a_pos = 1 To Length(xharba) By 8 /*                              */
   build = build||C2d(Substr(xharba,a_pos,8))||' '
  End                                /*                               */
  xharba = build                     /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_PHYBLKSZ - Process PHYBLKSZ field                              */
/**********************************************************************/
FLD_PHYBLKSZ:                        /* PHYBLKSZ field processing   ##*/
If (Substr(phyblksz,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do a_pos = 1 To Length(phyblksz) By 4
   build = build||C2d(Substr(phyblksz,a_pos,4))||' '
  End                                /*                               */
  phyblksz = build                   /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_NOBLKTRK - Process NOBLKTRK field                              */
/**********************************************************************/
FLD_NOBLKTRK:                        /* NOBLKTRK field processing   ##*/
If (Substr(noblktrk,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do a_pos = 1 To Length(noblktrk) By 2
   build = build||C2d(Substr(noblktrk,a_pos,2))||' '
  End                                /*                               */
  noblktrk = build                   /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_NOTRKAU  - Process NOTRKAU  field                              */
/**********************************************************************/
FLD_NOTRKAU:                         /* NOTRKAU  field processing   ##*/
If (Substr(notrkau,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do a_pos = 1 To Length(notrkau) By 2
   build = build||C2d(Substr(notrkau,a_pos,2))||' '
  End                                /*                               */
  notrkau = build                    /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ITYPEXT  - Process ITYPEXT  field                              */
/**********************************************************************/
FLD_ITYPEXT:                         /* ITYPEXT  field processing   ##*/
If (Substr(itypext,1,2) /= 'FFFF'x) Then
 Do
  build = ''
  Do i_pos = 1 To Length(itypext) By 1 /*                             */
   build = build||"X'"||C2x(Substr(itypext,i_pos,1))||"' "
  End                                /*                               */
  itypext = build                    /*                               */
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_USERAREC - Process USERAREC field - mainly duplicates ATTR1    */
/**********************************************************************/
FLD_USERAREC:                        /* USERAREC field processing   ##*/
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_VSAMREUS - Process VSAMREUS field - mainly duplicates ATTR1    */
/**********************************************************************/
FLD_VSAMREUS:                        /* VSAMREUS field processing   ##*/
Return                               /* duplicates ATTR1              */
vsamreus = X2b(C2x(vsamreus))        /* show binary flags             */
If (Substr(vsamreus,3,1) = '1') Then /* Check REUSE flag              */
 vsam_attr = vsam_attr' REUSE'       /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOREUSE'     /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_VSAMTYPE - Process VSAMTYPE field                              */
/**********************************************************************/
FLD_VSAMTYPE:                        /* VSAMTYPE field processing   ##*/
vsam_attr = ''                       /*                               */
vsam_byte1 = X2b(C2x(Substr(vsamtype,1,1))) /* get byte 1             */
vsam_byte2 = X2b(C2x(Substr(vsamtype,2,1))) /* get byte 2             */
Select                               /*                               */
 When (Substr(vsam_byte1,1,1) = '1') Then /*                          */
  Do                                 /*                               */
   vsam_type = 'KSDS'                /*                               */
   vsam_attr = vsam_attr' INDEXED'   /*                               */
  End                                /*                               */
 When (Substr(vsam_byte1,7,1) = '1') Then /*                          */
  Do                                 /*                               */
   vsam_type = 'RRDS'                /*                               */
   vsam_attr = vsam_attr' NUMBERED'  /*                               */
  End                                /*                               */
 When (Substr(vsam_byte2,6,1) = '1') Then /*                          */
  Do                                 /*                               */
   vsam_type = 'LDS'                 /*                               */
   vsam_attr = vsam_attr' LINEAR'    /*                               */
  End                                /*                               */
 When (Substr(vsam_byte2,8,1) = '1') Then /*                          */
  Do                                 /*                               */
   vsam_type = 'VRRDS'               /*                               */
   vsam_attr = vsam_attr' NUMBERED'  /*                               */
  End                                /*                               */
 Otherwise                           /*                               */
  Do                                 /*                               */
   vsam_type = 'ESDS'                /*                               */
   If (entype /= 'INDEX') Then       /*                               */
    vsam_attr = vsam_attr' NONINDEXED'/*                              */
  End                                /*                               */
End                                  /*                               */
If (Substr(vsam_byte1,2,1) = '1') Then /*                             */
 vsam_attr = vsam_attr' WRITECHECK'  /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOWRITECHK'  /*                               */
If (Substr(vsam_byte1,3,1) = '1') Then /*                             */
 vsam_attr = vsam_attr' IMBED'       /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOIMBED'     /*                               */
If (Substr(vsam_byte1,4,1) = '1') Then /*                             */
 vsam_attr = vsam_attr' REPLICATE'   /*                               */
Else                                 /*                               */
 vsam_attr = vsam_attr' NOREPLICAT'  /*                               */
If (entype /= 'INDEX') Then          /*                               */
 If (Substr(vsam_byte1,8,1) = '1') Then /*                            */
  vsam_attr = vsam_attr' SPANNED'     /*                              */
 Else                                 /*                              */
  vsam_attr = vsam_attr' NONSPANNED'  /*                              */
If (Substr(vsam_byte2,2,1) = '1') Then /* undocumented VVDS indicator */
 vsam_vvds = 'Y'                     /* Set VVDS flag                 */
Else                                 /*                               */
 vsam_vvds = 'N'                     /* Set VVDS flag off             */
vsam_attr = Strip(vsam_attr,B)       /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_RLSBWO   - Process RLSBWO   field                              */
/**********************************************************************/
FLD_RLSBWO:                          /* RLSBWO   field processing   ##*/
If (C2x(rlsbwo) = 'FF') Then         /*                               */
 rlsbwo = '(NULL)'                   /* no value set                  */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_UDATASIZ - Process UDATASIZ field                              */
/**********************************************************************/
FLD_UDATASIZ:                        /* UDATASIZ field processing   ##*/
If (Substr(udatasiz,1,2) = 'FFFF'x) Then /* If blank ownerid          */
 udatasiz = '(NULL)'                 /* set to null                   */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_LOGSTRID - Process LOGSTRID field                              */
/**********************************************************************/
FLD_LOGSTRID:                        /* LOGSTRID field processing   ##*/
If (Substr(logstrid,1,2) = 'FFFF'x) Then
 logstrid = '(NULL)'                 /* no value set                  */
 recvtime = '0000000000000000'x      /*                               */
 recvtimg = '0000000000000000'x      /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_LOGPARMS - Process LOGPARMS field                              */
/**********************************************************************/
FLD_LOGPARMS:                        /* LOGPARMS field processing   ##*/
Select                               /*                               */
 When (C2x(logparms) = '01') Then    /*                               */
  logparms = '(NONE)'                /*                               */
 When (C2x(logparms) = '02') Then    /*                               */
  logparms = '(UNDO)'                /*                               */
 When (C2x(logparms) = '03') Then    /*                               */
  logparms = '(ALL)'                 /*                               */
 Otherwise logparms = '(NULL)'       /* no value set                  */
End                                  /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_RLSFLAGS - Process RLSFLAGS field                              */
/**********************************************************************/
FLD_RLSFLAGS:                        /* RLSFLAGS field processing   ##*/
rlsflags = X2b(C2x(rlsflags))        /* convert to binary             */
If (rlsflags = '11111111') Then      /*                               */
 Do                                  /*                               */
  rlsinuse = '(NO)'                  /*                               */
  rlsrecov = '(NO)'                  /*                               */
  rlsquies = '(NO)'                  /*                               */
 End                                 /*                               */
Else                                 /*                               */
 Do                                  /*                               */
  rlsinuse = '(YES)'                 /*                               */
  rlsquies = '(NO)'                  /*                               */
  If (Substr(rlsflags,5,1) = '1') Then /* check indicator             */
   rlsrecov = '(YES)'                /*                               */
  Else                               /*                               */
   rlsrecov = '(NO)'                 /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* DCOL_PROC    - Process DCOLLECT details                            */
/**********************************************************************/
DCOL_PROC:                           /* DCOLLECT Processing         ##*/
If (Strip(volser,t) /= '') Then
 Do
  "NewStack"
  "Alloc Fi(SYSPRINT) Da('NULLFILE') Shr Reu"
  "Alloc Fi(AMSDUMP) Da('NULLFILE') Shr Reu"
  "Alloc Fi(SYSIN) New Lrecl(80) Reuse"
  Queue " DCOLLECT VOL("volser") OUTFILE(OUTDS)"
  Queue ""
  "ExecIO * DiskW SYSIN (Finis)"
  "Alloc Fi(OUTDS) Cylinders Space(10 10) New Lrecl(340) Recfm(V B) Reu"
  "Call *(IDCAMS)"
  "ExecIO * DiskR OUTDS (Stem dcol. Finis)"
  "Free Fi(OUTDS)"
  Do d = 1 to dcol.0
   dcddsnam = Strip(Substr(dcol.d,25,44),T)
   dcurctyp = Substr(dcol.d,4,2)
   If (dcddsnam = entname) Then
    Do
     If (dcurctyp = '00'X||'D') Then
      Do
       dcdacct  = Strip(Substr(dcol.d,289,32),T)
       If (Substr(dcdacct,1,2) = '0000'X) Then
        dcdacct = '(NULL)'
      End
     If (dcurctyp = '00'X||'A') Then
      Do
       dcanlr   = C2d(Substr(dcol.d,125,4))
       dcadlr   = C2d(Substr(dcol.d,129,4))
       dcainr   = C2d(Substr(dcol.d,133,4))
       dcaupr   = C2d(Substr(dcol.d,137,4))
       dcartr   = C2d(Substr(dcol.d,141,4))
       dcaasp   = C2d(Substr(dcol.d,145,4))
       dcacis   = C2d(Substr(dcol.d,149,4))
       dcacas   = C2d(Substr(dcol.d,153,4))
       dcaexc   = C2d(Substr(dcol.d,157,4))
       dcacaci  = C2d(Substr(dcol.d,185,4))
      End
    End
  End
 End
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* WRITE_MEMBER - Write out the generated lines to a PDS member       */
/**********************************************************************/
WRITE_MEMBER:                        /* Write out the report member ##*/
If (l_cnt = 0) Then                  /* if no output                  */
 Do                                  /*                               */
  l_cnt = l_cnt + 1                  /* write a no output line        */
  l.l_cnt = ' /*' no data produced '*/' /*                            */
 End                                 /*                               */
If (member /= 'REPORT') Then         /* if not a REPORT member        */
 Do                                  /*                               */
  l_cnt = l_cnt + 1                  /*  add a line                   */
  l.l_cnt = ' /*'member'*/'          /*  add report name              */
 End                                 /*                               */
If (outflag /= 'JES') Then           /* if not jes queue              */
 Do                                  /*                               */
  If (tso_flag = 'TSO') Then         /*                               */
   Address TSO "Alloc Fi(MEMOT) Da('"dsn"("member")') Shr Reuse"
  Else                               /*                               */
   Do                                /*                               */
    bpxparm = "Alloc Fi(MEMOT) Da('"dsn"("member")') Shr Reuse"
    Call BPXWDYN(bpxparm)            /*                               */
   End                               /*                               */
  Address MVS "ExecIO "l_cnt" DiskW MEMOT (Finis Stem l.)"
  If (tso_flag = 'TSO') Then         /*                               */
   Address TSO "Free Fi(MEMOT)"      /*                               */
  Else                               /*                               */
   Do                                /*                               */
    bpxparm = "Free Fi(MEMOT)"       /*                               */
    Call BPXWDYN(bpxparm)            /*                               */
   End                               /*                               */
 End                                 /*                               */
Else                                 /* otherwise                     */
 Address MVS "ExecIO "l_cnt" DiskW REPORT (Finis Stem l.)"
l_cnt = 0                            /* re-init line count for next   */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* DSN_HANDLING - Carry out processing for output dataset             */
/**********************************************************************/
DSN_HANDLING:                        /* 'Handle' the data produced  ##*/
rc = Listdd(REPORT)                  /*                               */
If (rc = 16) Then                    /* REPORT not allocated          */
 If (env_flag /= 'FORE') Then        /*                               */
  Do                                 /*                               */
   Say '**(Error-1)* For execution in batch, please ensure that a PDS'
   Say '**(Error-2)* is pre-allocated to DD name REPORT.'
   Signal FINISH                     /*                               */
  End                                /*                               */
 Else                                /*                               */
  If (ispf_flag /= 'ISPF') Then      /*                               */
   Do                                /*                               */
    Say '**(Error-1)* For execution in foreground TSO, please ensure'
    Say '**(Error-2)* that a PDS is pre-allocated to DD name REPORT.'
    Signal FINISH                    /*                               */
   End                               /*                               */
  Else                               /*                               */
   Do                                /*                               */
    If (tso_flag = 'TSO') Then       /*                               */
     Address TSO "Alloc Fi(REPORT) Lrecl(133) Unit(SYSALLDA)",
                 "Space(2,2) Dir(10) Cyl ",
                 "Blksize(1330) Recfm(F,B) New Reuse"
    Else                             /*                               */
     Do                              /*                               */
      bpxparm = "Alloc Fi(REPORT) Lrecl(133) Unit(SYSALLDA)",
                "Space(2,2) Dir(10) Cyl ",
                "Blksize(1330) Recfm(F,B) New Reuse"
      Call BPXWDYN(bpxparm)
     End                             /*                               */
    x = Listdd(REPORT)               /*                               */
    dsn = sysdsname                  /*                               */
   End                               /*                               */
Else                                 /*                               */
 dsn = sysdsname                     /* get dataset name from DD      */
If (sysvolume = '*JES**') Then       /*                               */
 Do                                  /*                               */
  Say '**(Warning-1)* For execution in batch, it is recommended that'
  Say '**(Warning-2)* a PDS is pre-allocated to DD name REPORT.'
  Say '**(Warning-3)* Processing will continue with sequential output.'
  outflag = 'JES'                    /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* TOT_INIT - Initialise the various totals variables                 */
/**********************************************************************/
TOT_INIT:                            /* Initialise totals variables ##*/
l_cnt   = 0                          /* Initialise output line count  */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* LISTDD   - Get the dataset and volume for a selected DD name       */
/**********************************************************************/
LISTDD:                                     /*                        */
Arg dd                                      /*                        */
Numeric Digits 20                           /*                        */
drc = 16                                    /*                        */
psatold  = Storage(D2x(540),4)              /* pointer to current tcb */
tcbtio   = Storage(D2x(C2d(psatold)+12),4)  /* pointer to tiot        */
offset   = 24                               /* establish tiot offset  */
Do Forever                                  /*                        */
 tioelngh = Storage(D2x(C2d(tcbtio)+offset+0),1) /* length of DD entry*/
 tioestta = Storage(D2x(C2d(tcbtio)+offset+1),1) /* status byte A     */
 tioelink = Storage(D2x(C2d(tcbtio)+offset+3),1) /* flag byte         */
 tioeddnm = Storage(D2x(C2d(tcbtio)+offset+4),8) /* DD name           */
 tioejfcb = Storage(D2x(C2d(tcbtio)+offset+12),3) /* SWA for JFCB     */
 tioefsrt = Storage(D2x(C2d(tcbtio)+offset+17),3) /* UCB address      */
 If (bitand(tioestta,'80'x) == '00'x) Then  /* check 'freed' status   */
  Do                                        /*                        */
   If (tioelngh == '00'x) Then Leave        /* no more allocations    */
   tioejfcb = SWAREQ(tioejfcb)              /* Call SWAREQ            */
   jfcbdsnm = Storage(D2x(C2d(tioejfcb)+0),44) /* get dataset name    */
   jfcbvols = Storage(D2x(C2d(tioejfcb)+118),30) /* get volume list   */
   tioelink = X2b(C2x(tioelink))            /* get bit pattern        */
   Select                                   /*                        */
    When (Substr(tioelink,3,1) = '1') Then  /* check for TERMINAL     */
     jfcbvols = "*TERM*"                    /*                        */
    When (Substr(tioelink,7,1) = '1') Then  /* check for subsys dsn   */
     jfcbvols = "*JES**"                    /*                        */
    Otherwise                               /*                        */
     Do                                     /*                        */
      ucbchan  = Storage(D2x(C2d(tioefsrt)+4),2) /* UCB channel (bin) */
      ucbname  = Storage(D2x(C2d(tioefsrt)+13),3) /* UCB name (EBCDIC)*/
      ucbvoli  = Storage(D2x(C2d(tioefsrt)+28),6) /* UCB volser       */
     End                                    /*                        */
   End                                      /*                        */
   If (tioeddnm = "") Then                  /* no ddname ?            */
    conc = conc + 1                         /*  assume concatenation  */
   else                                     /* otherwise              */
    conc = 0                                /*  assume first          */
   ucbname = ""                             /*                        */
   If (tioeddnm = "") Then                  /* no ddname ?            */
    Do                                      /*                        */
     dsns = dsns||' '||jfcbdsnm             /*  assume concatenation  */
     vols = vols||' '||Strip(jfcbvols,T)    /*  assume concatenation  */
    End                                     /*                        */
   else                                     /* otherwise              */
    If (flag = dd) Then                     /* if already set         */
     Do                                     /*                        */
      Signal DDDone                         /* exit procedure         */
     End                                    /* otherwise              */
   If (tioeddnm = dd) Then                  /* ddname match           */
    Do                                      /*                        */
     drc = 0                                /*                        */
     flag = dd                              /*  set flag              */
     dsns = jfcbdsnm                        /*  initialiase dsn list  */
     vols = Strip(jfcbvols,T)               /*  initialiase vol list  */
    End                                     /*                        */
  End                                       /*                        */
 offset = offset + C2d(tioelngh)            /*                        */
End                                         /*                        */
/**********************************************************************/
DDDone:                                     /*                        */
sysdsname = Strip(dsns,B)                   /* set LISTDSI values     */
sysvolume = Strip(vols,B)                   /* set LISTDSI values     */
Return drc                                  /*                        */
/**********************************************************************/
/* Common procedures                                                  */
/**********************************************************************/
SWAREQ:                                     /* SWAREQ Procedure     ::*/
If (Right(C2x(Arg(1)),1) \= 'F') Then       /* SWA=BELOW ?            */
 Return D2c(C2d(Arg(1))+16)                 /* yes, return sva+16     */
sva  = C2d(Arg(1))                          /* convert to decimal     */
tcb  = C2d(Storage(21C,4))                  /* TCB         PSATOLD    */
jscb = C2d(Storage(D2x(tcb+180),4))         /* JSCB        TCBJSCB    */
qmpl = C2d(Storage(D2x(jscb+244),4))        /* QMPL        JSCBQMPI   */
qmat = C2d(Storage(D2x(qmpl+24),4))         /* QMAT        QMADD      */
Do While sva > 65536                        /*                        */
 qmat = C2d(Storage(D2x(qmat+12),4))        /* next QMAT     QMAT+12  */
 sva=sva-65536                              /* 010006F -> 000006F     */
End                                         /*                        */
Return D2c(C2d(Storage(D2x(qmat+sva+1),4))+16) /* return address      */
/**********************************************************************/

/**********************************************************************/
/* DATA_HANDLING - Carry out whatever processing is required ...      */
/**********************************************************************/
DATA_HANDLING:                       /* 'Handle' the data produced  ##*/
If (csi_type = '0') Then             /* Catalog entries               */
 Do                                  /*                               */
 End                                 /*                               */
Else                                 /* Non-Catalog entries           */
 Do                                  /*                               */
  Select
   When (entype = 'CLUSTER') Then
    Do
     l_cnt = l_cnt + 1
     l.l_cnt = ' CLUSTER ------- 'entname
     l_cnt = l_cnt + 1
     l.l_cnt = '      IN-CAT --- 'csicname
     l_cnt = l_cnt + 1
     l.l_cnt = '      HISTORY'
     l_cnt = l_cnt + 1
     l.l_cnt = '        DATASET-OWNER-'Right(ownerid,10,'-')
     l.l_cnt = l.l_cnt||'     CREATION--------'dscrdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '        RELEASE-------'Right('???',10,'-')
     l.l_cnt = l.l_cnt||'     EXPIRATION------'dsexdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '      SMSDATA'
     l_cnt = l_cnt + 1
     l.l_cnt = '        STORAGECLASS -'Right(storclas,10,'-')
     l.l_cnt = l.l_cnt||'     MANAGEMENTCLASS'Right(mgmtclas,9,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        DATACLASS ----'Right(dataclas,10,'-')
     l.l_cnt = l.l_cnt||'     LBACKUP ---'ltbackdt
     l_cnt = l_cnt + 1
     l.l_cnt = '        BWO STATUS----'Right('???',10,'-')
     l.l_cnt = l.l_cnt||'     BWO TIMESTAMP---'Right('???',10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        BWO-----------'Right(rlsbwo,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      RLSDATA'
     l_cnt = l_cnt + 1
     l.l_cnt = '        LOG ----------'Right(logparms,12,'-')
     l.l_cnt = l.l_cnt||'   RECOVERY REQUIRED -'Right(rlsrecov,5,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        VSAM QUIESCED 'Right(rlsquies,11,'-')
     l.l_cnt = l.l_cnt||'    RLS IN USE --------'Right(rlsinuse,5,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
     l_cnt = l_cnt + 1
     l.l_cnt = '        LOGSTREAMID---'Right(logstrid,32,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = "           RECOVERY TIMESTAMP LOCAL-----X'"C2x(recvtime)"'"
     l_cnt = l_cnt + 1
     l.l_cnt = "           RECOVERY TIMESTAMP GMT-------X'"C2x(recvtimg)"'"
     l_cnt = l_cnt + 1
     l.l_cnt = '      PROTECTION-PSWD-'Right('???',10,'-')
     l.l_cnt = l.l_cnt||'     RACF----------'Right(secflags,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      ASSOCIATIONS'
     Do z = 1 To Words(type)
      l_cnt = l_cnt + 1
      l.l_cnt = "           "Left(Word(type,z),9,'-')||Word(name,z)
     End
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
    End
   When (entype = 'DATA') Then
    Do
     l_cnt = l_cnt + 1
     l.l_cnt = '    DATA ------- 'entname
     l_cnt = l_cnt + 1
     l.l_cnt = '      IN-CAT --- 'csicname
     l_cnt = l_cnt + 1
     l.l_cnt = '      HISTORY'
     l_cnt = l_cnt + 1
     l.l_cnt = '        DATASET-OWNER-'Right(ownerid,10,'-')
     l.l_cnt = l.l_cnt||'     CREATION--------'dscrdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '        RELEASE-------'Right('???',10,'-')
     l.l_cnt = l.l_cnt||'     EXPIRATION------'dsexdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '        ACCOUNT-INFO--'Right(dcdacct,39,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      PROTECTION-PSWD-'Right('',10,'-')
     l.l_cnt = l.l_cnt||'     RACF----------'Right(secflags,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      ASSOCIATIONS'
     Do z = 1 To Words(type)
      l_cnt = l_cnt + 1
      l.l_cnt = "           "Left(Word(type,z),9,'-')||Word(name,z)
     End
     l_cnt = l_cnt + 1
     l.l_cnt = '      ATTRIBUTES'
     l_cnt = l_cnt + 1
     l.l_cnt = '        KEYLEN--------'Right(keylen,10,'-')
     l.l_cnt = l.l_cnt||'     AVGLRECL------'Right(lrecl,10,'-')
     l.l_cnt = l.l_cnt||'     BUFSPACE------'Right(bufsize,10,'-')
     l.l_cnt = l.l_cnt||'     CISIZE--------'Right(cisize,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        RKP-----------'Right(rkp,10,'-')
     l.l_cnt = l.l_cnt||'     MAXLRECL------'Right(maxrcsz,10,'-')
     l.l_cnt = l.l_cnt||'     EXCPEXIT------'Right(excpexit,10,'-')
     l.l_cnt = l.l_cnt||'     CI/CA---------'Right(dcacaci,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SHROPTNS('attr2') 'vsam_attr
     l_cnt = l_cnt + 1
     l.l_cnt = '      STATISTICS'
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-TOTAL-----'Right(dcanlr,10,'-')
     l.l_cnt = l.l_cnt||'     SPLITS-CI-----'Right(dcacis,10,'-')
     l.l_cnt = l.l_cnt||'     EXCPS---------'Right(dcaexc,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-DELETED---'Right(dcadlr,10,'-')
     l.l_cnt = l.l_cnt||'     SPLITS-CA-----'Right(dcacas,10,'-')
                           bit = Right(Strip(noextnt,T),10,'-')
     l.l_cnt = l.l_cnt||'     EXTENTS-------'bit
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-INSERTED--'Right(dcainr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPACE-%CI-'Right('??',10,'-')
     l.l_cnt = l.l_cnt||'     SYSTEM-TIMESTAMP:'
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-UPDATED---'Right(dcaupr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPACE-%CA-'Right('??',10,'-')
     l.l_cnt = l.l_cnt||'          '
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-RETRIEVED-'Right(dcartr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPC-------'Right(dcaasp,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      ALLOCATION'
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-TYPE----'Right(spacoptn,10,'-')
     l.l_cnt = l.l_cnt||'     HI-A-RBA------'Right(xharbads,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-PRI-----'Right(primspac,10,'-')
     l.l_cnt = l.l_cnt||'     HI-U-RBA------'Right(xhurbads,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-SEC-----'Right(sconspac,10,'-')
     Do v = 1 to Words(volsers)
      l_cnt = l_cnt + 1
      l.l_cnt = '      VOLUME'
      l_cnt = l_cnt + 1
      l.l_cnt = '        VOLSER--------'Right(Word(volsers,v),10,'-')
                               bit = Right(Word(phyblksz,v),10,'-')
      l.l_cnt = l.l_cnt||'     PHYREC-SIZE---'bit
      l.l_cnt = l.l_cnt||'     HI-A-RBA------'Right(Word(xharba,v),10,'-')
      l.l_cnt = l.l_cnt||'     EXTENT-NUMBER-'Right(Word(noextnt,v),10,'-')
      l_cnt = l_cnt + 1
      l.l_cnt = '        DEVTYP------'Right(Word(devices,v),12,'-')
                               bit = Right(Word(noblktrk,v),10,'-')
      l.l_cnt = l.l_cnt||'     PHYRECS/TRK---'bit
      l.l_cnt = l.l_cnt||'     HI-U-RBA------'Right(Word(xhurba,v),10,'-')
      l.l_cnt = l.l_cnt||'     EXTENT-TYPE---'Right(Word(itypext,v),10,'-')
      l_cnt = l_cnt + 1
      l.l_cnt = '        VOLFLAG-----'Right(Word(volflg,v),12,'-')
                               bit = Right(Word(notrkau,v),10,'-')
      l.l_cnt = l.l_cnt||'     TRACKS/CA-----'bit
      l_cnt = l_cnt + 1
      l.l_cnt = '        EXTENTS:'
      Do e = 1 to Word(noextnt,v)
       l_cnt = l_cnt + 1
       l.l_cnt = '        LOW-CCHH----'Right('???',12,'-')
       l.l_cnt = l.l_cnt||'     LOW-RBA-------'Right('???',10,'-')
       l.l_cnt = l.l_cnt||'     TRACKS--------'Right('???',10,'-')
       l_cnt = l_cnt + 1
       l.l_cnt = '        HIGH-CCHH---'Right('???',12,'-')
       l.l_cnt = l.l_cnt||'     HIGH-RBA------'Right('???',10,'-')
      End
     End
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
    End
   When (entype = 'INDEX') Then
    Do
     l_cnt = l_cnt + 1
     l.l_cnt = '    INDEX ------ 'entname
     l_cnt = l_cnt + 1
     l.l_cnt = '      IN-CAT --- 'csicname
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
     l_cnt = l_cnt + 1
     l.l_cnt = '      HISTORY'
     l_cnt = l_cnt + 1
     l.l_cnt = '        DATASET-OWNER-'Right(ownerid,10,'-')
     l.l_cnt = l.l_cnt||'     CREATION--------'dscrdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '        RELEASE-------'Right('???',10,'-')
     l.l_cnt = l.l_cnt||'     EXPIRATION------'dsexdt2
     l_cnt = l_cnt + 1
     l.l_cnt = '      PROTECTION-PSWD-'Right('',10,'-')
     l.l_cnt = l.l_cnt||'     RACF----------'Right(secflags,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      ASSOCIATIONS'
     Do z = 1 To Words(type)
      l_cnt = l_cnt + 1
      l.l_cnt = "           "Left(Word(type,z),9,'-')||Word(name,z)
     End
     l_cnt = l_cnt + 1
     l.l_cnt = '      ATTRIBUTES'
     l_cnt = l_cnt + 1
     l.l_cnt = '        KEYLEN--------'Right(keylen,10,'-')
     l.l_cnt = l.l_cnt||'     AVGLRECL------'Right(lrecl,10,'-')
     l.l_cnt = l.l_cnt||'     BUFSPACE------'Right(bufsize,10,'-')
     l.l_cnt = l.l_cnt||'     CISIZE--------'Right(cisize,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        RKP-----------'Right(rkp,10,'-')
     l.l_cnt = l.l_cnt||'     MAXLRECL------'Right(maxrcsz,10,'-')
     l.l_cnt = l.l_cnt||'     EXCPEXIT------'Right(excpexit,10,'-')
     l.l_cnt = l.l_cnt||'     CI/CA---------'Right(dcacaci,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SHROPTNS('attr2') 'vsam_attr
     l_cnt = l_cnt + 1
     l.l_cnt = '      STATISTICS'
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-TOTAL-----'Right(dcanlr,10,'-')
     l.l_cnt = l.l_cnt||'     SPLITS-CI-----'Right(dcacis,10,'-')
     l.l_cnt = l.l_cnt||'     EXCPS---------'Right(dcaexc,10,'-')
     l.l_cnt = l.l_cnt||'     INDEX:'
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-DELETED---'Right(dcadlr,10,'-')
     l.l_cnt = l.l_cnt||'     SPLITS-CA-----'Right(dcacas,10,'-')
                           bit = Right(Strip(noextnt,T),10,'-')
     l.l_cnt = l.l_cnt||'     EXTENTS-------'bit
     l.l_cnt = l.l_cnt||'     LEVELS--------'Right('??',10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-INSERTED--'Right(dcainr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPACE-%CI-'Right('??',10,'-')
     l.l_cnt = l.l_cnt||'     SYSTEM-TIMESTAMP:'
     l.l_cnt = l.l_cnt||'     ENTRIES/SECT--'Right('??',10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-UPDATED---'Right(dcaupr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPACE-%CA-'Right('??',10,'-')
     l.l_cnt = l.l_cnt||'                   'Right('',10)
     l.l_cnt = l.l_cnt||'     SEQ-SET-RBA---'Right('??',10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        REC-RETRIEVED-'Right(dcartr,10,'-')
     l.l_cnt = l.l_cnt||'     FREESPC-------'Right(dcaasp,10,'-')
     l.l_cnt = l.l_cnt||'                   'Right('',10)
     l.l_cnt = l.l_cnt||'     HI-LEVEL-RBA--'Right('??',10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '      ALLOCATION'
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-TYPE----'Right(spacoptn,10,'-')
     l.l_cnt = l.l_cnt||'     HI-A-RBA------'Right(xharbads,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-PRI-----'Right(primspac,10,'-')
     l.l_cnt = l.l_cnt||'     HI-U-RBA------'Right(xhurbads,10,'-')
     l_cnt = l_cnt + 1
     l.l_cnt = '        SPACE-SEC-----'Right(sconspac,10,'-')
     Do v = 1 to Words(volsers)
      l_cnt = l_cnt + 1
      l.l_cnt = '      VOLUME'
      l_cnt = l_cnt + 1
      l.l_cnt = '        VOLSER--------'Right(Word(volsers,v),10,'-')
                               bit = Right(Word(phyblksz,v),10,'-')
      l.l_cnt = l.l_cnt||'     PHYREC-SIZE---'bit
      l.l_cnt = l.l_cnt||'     HI-A-RBA------'Right(Word(xharba,v),10,'-')
      l.l_cnt = l.l_cnt||'     EXTENT-NUMBER-'Right(Word(noextnt,v),10,'-')
      l_cnt = l_cnt + 1
      l.l_cnt = '        DEVTYP------'Right(Word(devices,v),12,'-')
                               bit = Right(Word(noblktrk,v),10,'-')
      l.l_cnt = l.l_cnt||'     PHYRECS/TRK---'bit
      l.l_cnt = l.l_cnt||'     HI-U-RBA------'Right(Word(xhurba,v),10,'-')
      l.l_cnt = l.l_cnt||'     EXTENT-TYPE---'Right(Word(itypext,v),10,'-')
      l_cnt = l_cnt + 1
      l.l_cnt = '        VOLFLAG-----'Right(Word(volflg,v),12,'-')
                               bit = Right(Word(notrkau,v),10,'-')
      l.l_cnt = l.l_cnt||'     TRACKS/CA-----'bit
      l_cnt = l_cnt + 1
      l.l_cnt = '        EXTENTS:'
      Do e = 1 to Word(noextnt,v)
       l_cnt = l_cnt + 1
       l.l_cnt = '        LOW-CCHH----'Right('???',12,'-')
       l.l_cnt = l.l_cnt||'     LOW-RBA-------'Right('???',10,'-')
       l.l_cnt = l.l_cnt||'     TRACKS--------'Right('???',10,'-')
       l_cnt = l_cnt + 1
       l.l_cnt = '        HIGH-CCHH---'Right('???',12,'-')
       l.l_cnt = l.l_cnt||'     HIGH-RBA------'Right('???',10,'-')
      End
     End
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
    End
   Otherwise
    Do
     l_cnt = l_cnt + 1
     l.l_cnt = 'Entry type not yet supported by CSICODEV:'
     l_cnt = l_cnt + 1
     l.l_cnt = 'Entry='entname' Type='entype
     l_cnt = l_cnt + 1
     l.l_cnt = ' '
    End
  End
 End
Return
/**********************************************************************/

