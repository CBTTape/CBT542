/* REXX - SPACE : DASD pool utilisation                               */
/**********************************************************************/
/* Changes :                                                          */
/* 1.0.0   - 13/05/2002 - Alastair Gray - Original version            */
/* 1.0.1   - 15/05/2002 - Alastair Gray - Added CSICODE cat check     */
/* 1.0.2   - 17/05/2002 - Alastair Gray - Added Unit into display     */
/* 1.0.3   - 23/05/2002 - Alastair Gray - Added SORT option           */
/* 1.0.4   - 24/05/2002 - Alastair Gray - Handles symbolic cataloging */
/* 1.0.5   - 24/05/2002 - Alastair Gray - Added 'max' to scroll       */
/* 1.0.6   - 27/05/2002 - Alastair Gray - Added ave % to pool display */
/* 1.0.7   - 29/05/2002 - Alastair Gray - Updated help panels         */
/* 1.0.8   - 31/05/2002 - Alastair Gray - Added 'End of List'         */
/* 1.0.9   - 03/06/2002 - Alastair Gray - added dslist for group/vol  */
/* 1.0.10  - 03/06/2002 - Alastair Gray - added row count             */
/* 1.1.0   - 03/06/2002 - Alastair Gray - added 'warning' panel       */
/* 1.1.1   - 13/06/2002 - Alastair Gray - added IDCAMS auth check     */
/* 1.1.2   - 08/07/2002 - Alastair Gray - added FULLC/D/V options     */
/* 1.1.3   - 17/07/2002 - Alastair Gray - corrected volume problem    */
/* 1.1.4   - 08/08/2002 - Alastair Gray - Realigned with CSICODE      */
/* 1.1.5   - 13/08/2002 - Alastair Gray - changed idcams call         */
/* 1.1.6   - 20/09/2002 - Alastair Gray - Realigned with CSICODE      */
/* 1.1.7   - 05/12/2003 - Alastair Gray - Added CSIOPTNS option (Z/OS)*/
/* 1.1.8   - 09/12/2003 - Alastair Gray - Added debug code            */
/* 1.2.0   - 14/01/2004 - Alastair Gray - Added fullword on/off by OS */
/**********************************************************************/
/* Description :                                                      */
/* Uses DCOLLECT to obtain storage group details and allow review of  */
/* volume/space usage.                                                */
/* Also allows catalog validation using CSI for details.              */
/**********************************************************************/
/* Note: ISPF Table processing not used as I wanted to have individual*/
/* highlighting and this approach seemed better (at the time).        */
/**********************************************************************/
Trace O                                     /*                        */
Numeric Digits 20                           /*                        */
/**********************************************************************/
Address ISPEXEC "Control Errors Return"     /* handle errors          */
/**********************************************************************/
Arg vals                                    /*                        */
/**********************************************************************/
Call DEFINE_HEX                             /* define hex values      */
/**********************************************************************/
vals = Translate(vals,'  ','()')            /*                        */
If (Pos(vals,"DEBUG(1)") > 0) Then          /* debug option           */
 Do                                         /*                        */
  debug = 1                                 /*                        */
  Say '**(Debug)*** Debug level 1 enabled'  /*                        */
 End                                        /*                        */
Select                                      /*                        */
 When (Word(vals,1) = 'V') |,               /* volume option          */
      (Word(vals,1) = 'VOL') |,             /*                        */
      (Word(vals,1) = 'VOLUME') Then        /*                        */
  Do                                        /*                        */
   Call BASE_DATA                           /* get main data          */
   sel_flag = 'VOLUME'                      /* set flag for volume    */
   sel_group = Word(vals,2)                 /* set pattern from arg   */
   Call PROCESS_GROUP                       /* process for group      */
  End                                       /*                        */
 When (Word(vals,1) = 'P') |,               /* pool option            */
      (Word(vals,1) = 'POOL') Then          /*                        */
  Do                                        /*                        */
   Call BASE_DATA                           /* get main data          */
   sel_flag = 'POOL'                        /* set flag for pool      */
   sel_group = Word(vals,2)                 /* set pattern from arg   */
   Call PROCESS_GROUP                       /* process for group      */
  End                                       /*                        */
 When (Word(vals,1) = '?') Then             /* help option            */
  Do                                        /*                        */
   Call CREATE_PDS                          /* build panel library    */
   Call DEFINE_TUTOR0                       /* define tutorial        */
   Call CREATE_MEMBER                       /* build panel            */
   Address ISPEXEC "LibDef ISPPLIB Library Id("fil") Stack"
   Do While rc < 8                          /*                        */
    Address ISPEXEC "Display Panel(TSPACE00)"/* display help screen   */
   End                                      /*                        */
   Address ISPEXEC "LibDef ISPPLIB"         /* clear the temp alloc   */
  End                                       /*                        */
 When (Words(vals) = 0) Then                /* default option         */
  Do                                        /*                        */
   Call BASE_DATA                           /* get main data          */
   Call PROCESS_GROUPS                      /* process groups         */
  End                                       /*                        */
 Otherwise NOP                              /*                        */
End                                         /*                        */
                                            /*                        */
/**********************************************************************/
/**********************************************************************/
FINISH:                                     /* exit the exec        ##*/
Exit 0                                      /*                        */
/**********************************************************************/
PROCESS_GROUPS:                             /* process groups       ##*/
sort_parm1 = ''                             /*                        */
Call DISP_GROUPS                            /* display group setup    */
Call CREATE_PDS                             /* build panel library    */
Call DEFINE_PANEL0                          /* define panel           */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_PANEL1                          /* define panel           */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR0                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR1                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
fil_pan1 = fil                              /*                        */
Address ISPEXEC "LibDef ISPPLIB Library Id("fil_pan1") Stack"
p1rc = 0                                    /*                        */
start1 = 1                                  /*                        */
data1 = Substr(save_data1,start1,4000)      /* max 50 lines ...       */
Do While (p1rc < 8)                         /*                        */
 rown = (start1+79)/80                      /* row number             */
 rowm = (Length(save_data1)-240)/80         /* max rows               */
 rowt = 'Row '||rown||' of '||rowm||' '     /* row text               */
 rowt = Right(rowt,79)                      /* row text               */
 Address ISPEXEC "Display Panel(PSPACE01)"  /* display the panel      */
 p1rc = rc                                  /*                        */
 If (rc > 8) Then                           /*                        */
  Address ISPEXEC "SetMSG Msg("zerrmsg")"   /*                        */
 Address ISPEXEC "PQuery Panel(PSPACE01) Areaname(DATA1) ",
                        "Width(d1wid) Depth(d1dep)"
 If (zcmd = 'REFRESH') Then                 /*                        */
  Do                                        /*                        */
   Call BASE_DATA                           /* get main data          */
   Call DISP_GROUPS                         /*                        */
  End                                       /*                        */
 If (Word(zcmd,1) = 'SORT') Then            /*                        */
  Do                                        /*                        */
   Call SORT_DECODE                         /* translate SORT parms   */
   sort_parm1 = sort_parm                   /*                        */
   Call DISP_GROUPS                         /*                        */
  End                                       /*                        */
 Address ISPEXEC "VGet (zverb zscrolln zscrolla) Asis"
 Do loop = 1 to Length(data1)-79 By 80      /*                        */
  test = Substr(data1,loop,80)              /*                        */
  If (strip(test,B) = '') Then Iterate      /*                        */
  Upper test                                /*                        */
  sel_g_char = Substr(test,2,1)             /*                        */
  If (sel_g_char = 'S') Then                /*                        */
   Do                                       /*                        */
    data1 = Overlay(' ',data1,loop+1)       /*                        */
    sel_group = Strip(Substr(test,4,8))     /*                        */
    Call PROCESS_GROUP                      /*                        */
   End                                      /*                        */
  If (sel_g_char = 'C') |,                  /*                        */
     (sel_g_char = 'D') |,                  /*                        */
     (sel_g_char = 'V') Then                /*                        */
   Do                                       /*                        */
    chk = 'NO'                              /*                        */
    Address ISPEXEC "Display Panel(PSPACE00)"/* display the panel     */
    p0rc = rc                               /*                        */
    If (rc > 8) Then                        /*                        */
     Address ISPEXEC "SetMSG Msg("zerrmsg")"/*                        */
    Upper chk                               /*                        */
    If (chk = 'YES') Then                   /*                        */
     Do                                     /*                        */
      data1 = Overlay(' ',data1,loop+1)     /*                        */
      sel_v_char = sel_g_char               /*                        */
      sel_group = Strip(Substr(test,4,8))   /*                        */
      If (Strip(sel_group) = '') Then       /*                        */
       dco_parm  = 'VOL('null_vols')'       /*                        */
      Else                                  /*                        */
       dco_parm  = 'STOG('sel_group')'      /*                        */
      sel_volume = Substr(test,4,6)         /*                        */
      Call PROCESS_VOLUME                   /*                        */
     End                                    /*                        */
   End                                      /*                        */
 End                                        /*                        */
 If (zverb = 'DOWN') Then                   /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start1 = (Length(save_data1)-79)-((d1dep-1)*80) /*                 */
  Else                                      /*                        */
   start1 = start1 + (zscrolln*80)          /*                        */
 If (zverb = 'UP') Then                     /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start1 = 1                               /*                        */
  Else                                      /*                        */
   start1 = start1 - (zscrolln*80)          /*                        */
 If (start1 < 1) Then start1 = 1            /*                        */
 If (start1 > (Length(save_data1)-319)) Then/*                        */
  start1 = Length(save_data1) - 319         /*                        */
 data1 = Substr(save_data1,start1,4000)     /* max 50 lines ...       */
End                                         /*                        */
Address ISPEXEC "LibDef ISPPLIB"            /* clear the temp alloc   */
Address TSO     "Free Fi("fil_pan1")"       /* free the temp dsn      */
Return 0                                    /*                        */
/**********************************************************************/
PROCESS_GROUP:                              /* process single group ##*/
sort_parm2 = ''                             /*                        */
Call DISP_GROUP                             /* display vol setup      */
Call CREATE_PDS                             /* build panel library    */
Call DEFINE_PANEL0                          /* define panel           */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_PANEL2                          /* define panel           */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR0                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR2                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
fil_pan2 = fil                              /*                        */
Address ISPEXEC "LibDef ISPPLIB Library Id("fil_pan2") Stack"
p2rc = 0                                    /*                        */
start2 = 1                                  /*                        */
data2 = Substr(save_data2,start2,4000)      /* max 50 lines ...       */
Do while p2rc < 8                           /*                        */
 rown = (start2+79)/80                      /* row number             */
 rowm = (Length(save_data2)-240)/80         /* max rows               */
 rowt = 'Row '||rown||' of '||rowm||' '     /* row text               */
 rowt = Right(rowt,79)                      /* row text               */
 Address ISPEXEC "Display Panel(PSPACE02)"  /* display the panel      */
 p2rc = rc                                  /*                        */
 If (rc > 8) Then                           /*                        */
  Address ISPEXEC "SetMSG Msg("zerrmsg")"   /*                        */
 Address ISPEXEC "PQuery Panel(PSPACE02) Areaname(DATA2) ",
                        "Width(d2wid) Depth(d2dep)"
 If (zcmd = 'REFRESH') Then                 /*                        */
  Do                                        /*                        */
   Call BASE_DATA                           /* get main data          */
   Call DISP_GROUP                          /*                        */
  End                                       /*                        */
 If (Word(zcmd,1) = 'SORT') Then            /*                        */
  Do                                        /*                        */
   Call SORT_DECODE                         /* translate SORT parms   */
   sort_parm2 = sort_parm                   /*                        */
   Call DISP_GROUP                          /*                        */
  End                                       /*                        */
 If (zcmd = 'FULLC') |,                     /*                        */
    (zcmd = 'FULLD') |,                     /*                        */
    (zcmd = 'FULLV') Then                   /*                        */
  Do                                        /*                        */
   sel_v_char = Substr(zcmd,5,1)            /*                        */
   chk = 'NO'                               /*                        */
   Address ISPEXEC "Display Panel(PSPACE00)"/* display the panel      */
   p0rc = rc                                /*                        */
   If (rc > 8) Then                         /*                        */
    Address ISPEXEC "SetMSG Msg("zerrmsg")" /*                        */
   Upper chk                                /*                        */
   sel_volume = sel_group                   /*                        */
   If (chk = 'YES') Then                    /*                        */
    Do                                      /*                        */
     If (Strip(sel_group) = '') Then        /*                        */
      dco_parm  = 'VOL('null_vols')'        /*                        */
     Else                                   /*                        */
      dco_parm  = 'STOG('sel_group')'       /*                        */
     Call PROCESS_VOLUME                    /*                        */
    End                                     /*                        */
  End                                       /*                        */
 Address ISPEXEC "VGet (zverb zscrolln zscrolla) Asis"
 Do loop = 1 to Length(data2)-79 By 80      /*                        */
  test = Substr(data2,loop,80)              /*                        */
  If (strip(test,B) = '') Then Iterate      /*                        */
  Upper test                                /*                        */
  sel_v_char = Substr(test,2,1)             /*                        */
  If (sel_v_char = 'C')  |,                 /*                        */
     (sel_v_char = 'D')  |,                 /*                        */
     (sel_v_char = 'S')  |,                 /*                        */
     (sel_v_char = 'V')  Then               /*                        */
   Do                                       /*                        */
    data2 = Overlay(' ',data2,loop+1)       /*                        */
    sel_volume = Substr(test,4,6)           /*                        */
    dco_parm   = 'VOL('sel_volume')'        /*                        */
    Call PROCESS_VOLUME                     /*                        */
   End                                      /*                        */
 End                                        /*                        */
 If (zverb = 'DOWN') Then                   /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start2 = (Length(save_data2)-79)-((d2dep-1)*80) /*                 */
  Else                                      /*                        */
   start2 = start2 + (zscrolln*80)          /*                        */
 If (zverb = 'UP') Then                     /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start2 = 1                               /*                        */
  Else                                      /*                        */
   start2 = start2 - (zscrolln*80)          /*                        */
 If (start2 < 1) Then start2 = 1            /*                        */
 If (start2 > (Length(save_data2)-319)) Then/*                        */
  start2 = Length(save_data2) - 319         /*                        */
 data2 = Substr(save_data2,start2,4000)     /* max 50 lines ...       */
End                                         /*                        */
Address ISPEXEC "LibDef ISPPLIB"            /* clear the temp alloc   */
Address TSO     "Free Fi("fil_pan2")"       /* free the temp dsn      */
Return 0                                    /*                        */
/**********************************************************************/
PROCESS_VOLUME:                             /* process single volume##*/
sort_parm3 = ''                             /*                        */
If (sel_v_char = 'S') Then                  /*                        */
 Do                                         /*                        */
  Address ISPEXEC "LMDInit ListID(lid) Volume("sel_volume")" /*     */
  If (rc > 0) Then                          /*                        */
   Address ISPEXEC "SetMSG Msg("zerrmsg")"  /*                        */
  Else                                      /*                        */
   Address ISPEXEC "LMDDisp ListID("lid")"  /*                        */
  If (rc > 0) Then                          /*                        */
   Address ISPEXEC "SetMSG Msg("zerrmsg")"  /*                        */
  Address ISPEXEC "LMDFree ListID("lid")"   /*                        */
  Return 0                                  /*                        */
 End                                        /*                        */
Call DISP_VOLUME                            /* display vol setup      */
Call CREATE_PDS                             /* build panel library    */
Call DEFINE_PANEL3                          /* define panel           */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR0                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
Call DEFINE_TUTOR3                          /* define tutorial        */
Call CREATE_MEMBER                          /* build panel            */
fil_pan3 = fil                              /*                        */
Address ISPEXEC "LibDef ISPPLIB Library Id("fil_pan3") Stack"
p3rc = 0                                    /*                        */
start3 = 1                                  /*                        */
data3 = Substr(save_data3,start3,4000)      /* max 50 lines ...       */
Do while p3rc < 8                           /*                        */
 rown = (start3+79)/80                      /* row number             */
 rowm = (Length(save_data3)-80)/80          /* max rows               */
 rowt = 'Row '||rown||' of '||rowm||' '     /* row text               */
 rowt = Right(rowt,79)                      /* row text               */
 Address ISPEXEC "Display Panel(PSPACE03)"  /* display the panel      */
 p3rc = rc                                  /*                        */
 If (rc > 8) Then                           /*                        */
  Address ISPEXEC "SetMSG Msg("zerrmsg")"   /*                        */
 Address ISPEXEC "PQuery Panel(PSPACE03) Areaname(DATA3) ",
                        "Width(d3wid) Depth(d3dep)"
 If (zcmd = 'REFRESH') Then                 /*                        */
  Call DISP_VOLUME                          /*                        */
 If (Word(zcmd,1) = 'SORT') Then            /*                        */
  Do                                        /*                        */
   Call SORT_DECODE                         /* translate SORT parms   */
   sort_parm3 = sort_parm                   /*                        */
   Call DISP_VOLUME                         /*                        */
  End                                       /*                        */
 Address ISPEXEC "VGet (zverb zscrolln zscrolla) Asis"
 Do loop = 1 to Length(data3)-79 By 80      /*                        */
  test = Substr(data3,loop,80)              /*                        */
  If (strip(test,B) = '') Then Iterate      /*                        */
  Upper test                                /*                        */
  sel_d_char = Substr(test,2,1)             /*                        */
  If (sel_d_char = 'B') |,                  /*                        */
     (sel_d_char = 'E') |,                  /*                        */
     (sel_d_char = 'S') |,                  /*                        */
     (sel_d_char = 'V') Then                /*                        */
   Do                                       /*                        */
    rows = rown + ((loop-1)/80)             /*                        */
    vols = Substr(datav,(rows*6)-5,6)       /*                        */
    sel_volume  = vols                      /* get correct volume     */
    data3 = Overlay(' ',data3,loop+1)       /*                        */
    sel_dataset = Strip(Substr(test,4,44))  /*                        */
    Call PROCESS_DATASET                    /*                        */
   End                                      /*                        */
 End                                        /*                        */
 If (zverb = 'DOWN') Then                   /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start3 = (Length(save_data3)-79)-((d3dep-1)*80) /*                 */
  Else                                      /*                        */
   start3 = start3 + (zscrolln*80)          /*                        */
 If (zverb = 'UP') Then                     /*                        */
  If (zscrolla = 'MAX') Then                /*                        */
   start3 = 1                               /*                        */
  Else                                      /*                        */
   start3 = start3 - (zscrolln*80)          /*                        */
 If (start3 < 1) Then start3 = 1            /*                        */
 If (start3 > Length(save_data3)) Then start3 = Length(save_data3) - 159
 data3 = Substr(save_data3,start3,4000)     /* max 50 lines ...       */
End                                         /*                        */
Address ISPEXEC "LibDef ISPPLIB"            /* clear the temp alloc   */
Address TSO     "Free Fi("fil_pan3")"       /* free the temp dsn      */
Return 0                                    /*                        */
/**********************************************************************/
PROCESS_DATASET:                            /* process dataset      ##*/
Select                                      /*                        */
 When (sel_d_char = 'B') Then               /*                        */
  Address ISPEXEC "Browse Dataset('"sel_dataset"') Volume("sel_volume")"
 When (sel_d_char = 'E') Then               /*                        */
  Address ISPEXEC "Edit   Dataset('"sel_dataset"') Volume("sel_volume")"
 When (sel_d_char = 'S') Then               /*                        */
  Address ISPEXEC "Edit   Dataset('"sel_dataset"') Volume("sel_volume")"
 When (sel_d_char = 'V') Then               /*                        */
  Address ISPEXEC "View   Dataset('"sel_dataset"') Volume("sel_volume")"
 Otherwise NOP                              /*                        */
End                                         /*                        */
If (rc > 0) Then                            /*                        */
 Address ISPEXEC "SetMSG Msg("zerrmsg")"    /*                        */
Return 0                                    /*                        */
/**********************************************************************/
BASE_DATA:                                  /* dcollect all vols    ##*/
If (idcams_check /= 'YES') Then             /* test IDCAMS authorised */
 Do                                         /*                        */
  x = Outtrap('authpgm.')                   /*                        */
  Address TSO "PARMLIB LIST(AUTHPGM)"       /* list authorised pgms   */
  x = Outtrap()                             /*                        */
  parms_loc = Strip(authpgm.3,B)            /*                        */
  Do ids = 9 to authpgm.0                   /*                        */
   If (Pos('IDCAMS',authpgm.ids) > 0) Then  /* check if IDCAMS present*/
    Do                                      /*                        */
     idcams_check = 'YES'                   /*                        */
     Leave                                  /*                        */
    End                                     /*                        */
  End                                       /*                        */
  If (idcams_check /= 'YES') Then           /*                        */
   Do                                       /*                        */
    zerralrm = 'YES'                        /*                        */
    zerrsm = 'IDCAMS not authorised'        /*                        */
    zerrlm = 'Check 'parms_loc' and add IDCAMS to AUTHPGM section.'
    Address ISPEXEC "Setmsg Msg(ISRZ002)"   /* general error messageid*/
    Signal FINISH                           /*                        */
   End                                      /*                        */
 End                                        /*                        */
Address TSO                                 /*                        */
"NewStack"                                  /*                        */
"Alloc Fi(SYSPRINT) Da('NULLFILE') Shr Reu" /*                        */
"Alloc Fi(AMSDUMP) Da('NULLFILE') Shr Reu"  /*                        */
"Alloc Fi(SYSIN) New Lrecl(80) Reuse"       /*                        */
Queue " DCOLLECT VOL(*) OUTFILE(OUTDS) NOD" /*                        */
Queue ""                                    /*                        */
"ExecIO * DiskW SYSIN (Finis)"              /*                        */
"Alloc Fi(OUTDS) Cylinders Space(10 10) New Lrecl(340) Recfm(V B) Reu"
"Call *(IDCAMS)"                            /*                        */
"ExecIO * DiskR OUTDS (Stem l. Finis)"      /*                        */
"Free Fi(OUTDS)"                            /*                        */
cnt_vols   = l.0                            /*                        */
cnt_groups = 0                              /*                        */
tot_cap    = 0                              /*                        */
tot_alo    = 0                              /*                        */
null_vols  = ''                             /* init non-SMS vol list  */
Drop cnt_group.                             /* drop for refresh       */
Do loop = 1 To l.0                          /*                        */
 dcvvolsr.loop = Substr(l.loop,25,6)        /* volume serial number   */
 dcvperct.loop = C2d(Substr(l.loop,36,1))/* percent free space        */
 dcvfresp.loop = C2d(Substr(l.loop,37,4))/* free space     in kb      */
 dcvalloc.loop = C2d(Substr(l.loop,41,4))/* alloc space in kb         */
 dcvvlcap.loop = C2d(Substr(l.loop,45,4))/* capacity       in kb      */
 dcvfragi.loop = C2d(Substr(l.loop,49,4))/* fragmentation index       */
 dcvlgext.loop = C2d(Substr(l.loop,53,4))/* largest extent            */
 dcvdvtyp.loop = Strip(Substr(l.loop,69,8),B) /* device type          */
 If (dcvdvtyp.loop = '3390') Then size_cyl = '849960' /* cyl in bytes */
 If (dcvdvtyp.loop = '3380') Then size_cyl = '712140' /* cyl in bytes */
 If (dcvdvtyp.loop = '3390') Then size_trk = '56664'  /* trk in bytes */
 If (dcvdvtyp.loop = '3380') Then size_trk = '47476'  /* trk in bytes */
 Select                                     /* capacity    in kb      */
  When (dcvvlcap.loop = '1846417') Then type = '3380-K' /*            */
  When (dcvvlcap.loop = '1847666') Then type = '3390-2' /*            */
  When (dcvvlcap.loop = '2771500') Then type = '3390-3' /*            */
  Otherwise type = dcvdvtyp.loop            /*                        */
 End                                        /*                        */
 dcvvolsr      = dcvvolsr.loop              /* get volser             */
 type.dcvvolsr = type                       /* save type              */
 size_cyl.dcvvolsr = size_cyl               /* save cylinder size     */
 size_trk.dcvvolsr = size_trk               /* save track size        */
 dcvlgext.loop = (dcvlgext.loop*1024)/size_cyl /* convert to cyls     */
 dcvdvnum.loop = Right(D2x(C2d(Substr(l.loop,77,2))),4,'0')/*         */
 dcvsglng      = C2d(Substr(l.loop,81,2))/* storage group name leng*/
 If (dcvsglng = 0) Then                     /*                        */
  null_vols = null_vols||dcvvolsr||' '      /* build non-sms vol list */
 dcvsgtcl.loop = Substr(l.loop,83,dcvsglng)/* storage group name      */
 dcvdptyp.loop = Substr(l.loop,113,8)       /* physical device type   */
 tot_cap       = tot_cap + dcvvlcap.loop    /* accumulate capacity    */
 tot_alo       = tot_alo + dcvalloc.loop    /* accumulate allocated   */
 dcvsgtcl      = dcvsgtcl.loop              /*                        */
 If (cnt_group.dcvsgtcl > 0) Then           /* test if group known    */
  Do                                        /*                        */
   cnt_group.dcvsgtcl = cnt_group.dcvsgtcl + 1 /*                     */
   alo_group.dcvsgtcl = alo_group.dcvsgtcl + dcvalloc.loop /*         */
   cap_group.dcvsgtcl = cap_group.dcvsgtcl + dcvvlcap.loop /*         */
  End                                       /*                        */
 Else                                       /*                        */
  Do                                        /* storage group unknown  */
   cnt_groups = cnt_groups + 1              /*                        */
   cnt_group.dcvsgtcl = 1                   /*                        */
   alo_group.dcvsgtcl = dcvalloc.loop       /*                        */
   cap_group.dcvsgtcl = dcvvlcap.loop       /*                        */
   nam_group.cnt_groups = dcvsgtcl          /*                        */
  End                                       /*                        */
End                                         /*                        */
Return 0                                    /*                        */
/**********************************************************************/
DISP_GROUPS:                                /*                      ##*/
data1 = ''                                  /*                        */
Do loop = 1 to cnt_groups                   /*                        */
 nam_group = nam_group.loop                 /*                        */
 cnt_group = cnt_group.nam_group            /* get the group count    */
 alo_group = alo_group.nam_group            /* get total allocated    */
 cap_group = cap_group.nam_group            /* get total capacity     */
 fre_group = cap_group - alo_group          /* get total free         */
 per_group = (alo_group / cap_group) * 100  /* calculate percentage   */
 per_disp  = Left('',Trunc((per_group*31)/100,0),'*')
 alo_group = Trunc((alo_group*1024)/10**9,2)/* change to GB           */
 cap_group = Trunc((cap_group*1024)/10**9,2)/* change to GB           */
 fre_group = Trunc((fre_group*1024)/10**9,2)/* change to GB           */
 Select                                     /*                        */
  When (per_group >= 85) Then high = X0F    /*                        */
  When (per_group >= 75) Then high = X0E    /*                        */
  Otherwise high = X0D                      /*                        */
 End                                        /*                        */
 display = X20" "X0C||Left(nam_group,19)
 display = display||Right(cnt_group,4)
 display = display||Right(cap_group,8)
 display = display||Right(fre_group,8)
 display = display||high||Right(Trunc(per_group,0),3)||"% "
 display = display||per_disp
 data1 = data1||Left(display,80)            /*                        */
End                                         /*                        */
disp_pat = '   STOGROUP            VOL TOTAL   FREE    PCT  XXX'
data    = data1                             /*                        */
sort_parm = sort_parm1                      /*                        */
sort_leng = 80                              /* set sort length        */
Call DATA_SORT                              /*                        */
data1   = data                              /*                        */
display = X0B||"----------------------------------------------"
data1   = data1||Left(display,80)           /*                        */
tot_fre = tot_cap - tot_alo                 /* calculate total free   */
tot@fre = Format((tot_fre*1024)/10**9,6,0)  /* change to GB           */
tot@cap = Format((tot_cap*1024)/10**9,6,0)  /* change to GB           */
display = X0C" "X0B||Left('Total',19)||Right(cnt_vols,4)
display = display||Right(tot@cap,8)||Right(tot@fre,8)
data1   = data1||Left(display,80)           /*                        */
data1   = data1||X0C||Centre(' End of List ',79,'*')
save_data1 = data1                          /*                        */
Return 0                                    /*                        */
/**********************************************************************/
DISP_GROUP:                                 /*                      ##*/
data2 = ''                                  /*                        */
cnt_group = 0                               /*                        */
alo_group = 0                               /*                        */
cap_group = 0                               /*                        */
Do loop = 1 to cnt_vols                     /*                        */
 dcvsgtcl  = dcvsgtcl.loop                  /*                        */
 dcvvolsr  = dcvvolsr.loop                  /* volume serial          */
 Select                                     /*                        */
  When (sel_flag = 'POOL') Then             /* 'POOL' selection       */
   Do                                       /*                        */
    If (sel_group /= '') &,                 /* no value set           */
       (sel_group /= '*') Then              /* wildcard for everything*/
     Do                                     /*                        */
      sel_mask = Strip(Translate(sel_group,' ','*'),B) /* remove wild */
      len_mask = Length(sel_mask)           /* length of mask         */
      len_sgrp = Length(dcvsgtcl)           /* length of stor group   */
      test_pos = (len_sgrp-len_mask) + 1
      If (Substr(sel_group,1,1) /= '*') Then  /*                      */
       If (Pos(sel_mask,Strip(dcvsgtcl)) <> 1) Then Iterate
      If (Substr(sel_group,Length(sel_group),1) /= '*') Then /*       */
       If (Pos(sel_mask,Strip(dcvsgtcl)) <> test_pos) Then Iterate
      If (Pos(sel_mask,Strip(dcvsgtcl)) = 0) Then Iterate
     End                                    /*                        */
   End                                      /*                        */
  When (sel_flag = 'VOLUME') Then           /* 'POOL' selection       */
   Do                                       /*                        */
    If (sel_group /= '') &,                 /* no value set           */
       (sel_group /= '*') Then              /* wildcard for everything*/
     Do                                     /*                        */
      sel_mask = Strip(Translate(sel_group,' ','*'),B) /* remove wild */
      len_mask = Length(sel_mask)           /* length of mask         */
      len_sgrp = Length(dcvvolsr)           /* length of volser       */
      test_pos = (len_sgrp-len_mask) + 1
      If (Substr(sel_group,1,1) /= '*') Then  /*                      */
       If (Pos(sel_mask,Strip(dcvvolsr)) <> 1) Then Iterate
      If (Substr(sel_group,Length(sel_group),1) /= '*') Then /*       */
       If (Pos(sel_mask,Strip(dcvvolsr)) <> test_pos) Then Iterate
      If (Pos(sel_mask,Strip(dcvvolsr)) = 0) Then Iterate
     End                                    /*                        */
   End                                      /*                        */
  Otherwise                                 /* normal option          */
   If (Strip(dcvsgtcl) /= sel_group) Then Iterate
 End                                        /*                        */
 cnt_group = cnt_group + 1                  /* members in group       */
 dcvperct  = dcvperct.loop                  /* percent free space     */
 dcvfresp  = Trunc((dcvfresp.loop*1024)/10**9,2) /* free space        */
 dcvalloc  = Trunc((dcvalloc.loop*1024)/10**9,2) /* allocated space   */
 dcvvlcap  = Trunc((dcvvlcap.loop*1024)/10**9,2) /* total capacity    */
 alo_group = alo_group + dcvalloc.loop
 cap_group = cap_group + dcvvlcap.loop
 dcvfragi  = dcvfragi.loop                  /* fragmentation index    */
 dcvlgext  = dcvlgext.loop                  /* largest extent         */
 dcvdvtyp  = dcvdvtyp.loop                  /* device type            */
 dcvdptyp  = dcvdptyp.loop                  /* physical device type   */
 dcvdvnum  = dcvdvnum.loop                  /* device number          */
 If (dcvvlcap > 0) Then                     /* check for zero capacity*/
  per_vol   = (dcvalloc/dcvvlcap) * 100     /* calculate percentage   */
 Else                                       /*                        */
  per_vol   = 0                             /* set percentage         */
 Select                                     /*                        */
  When (per_vol >= 85) Then high = X0F      /*                        */
  When (per_vol >= 75) Then high = X0E      /*                        */
  Otherwise high = X0D                      /*                        */
 End                                        /*                        */
 per_disp  = Left('',Trunc((per_vol*31)/100,0),'*')
 display = X20" "X0C||Left(dcvvolsr,7)||Left(dcvdvnum,5)
 display = display||Left(dcvdvtyp,5)||Right(dcvvlcap,5)" "
 display = display||Right(dcvfresp,5)||Right(Trunc(dcvlgext,0),6)
 display = display||Right(Trunc(dcvfragi,0),5)
 display = display||high||Right(Trunc(per_vol,0),3)||"% "||per_disp
 data2 = data2||Left(display,80)            /*                        */
End                                         /*                        */
If (cnt_group = 0) Then                     /*                        */
 Do                                         /*                        */
  zerralrm = 'YES'                          /*                        */
  zerrhm = 'TSPACE02'                       /*                        */
  zerrsm = 'No volumes found'               /*                        */
  zerrlm = 'No volumes matching 'sel_group' where found.' /*          */
  Address ISPEXEC "Setmsg Msg(ISRZ002)"     /* general error messageid*/
  save_data2 = Left('',4000)                /*                        */
  Return                                    /*                        */
 End                                        /*                        */
disp_pat = '   VOLSER ADDR TYPE CAPA  FREE  CNTG  FRAG PCT  XXX'
data    = data2                             /*                        */
sort_parm = sort_parm2                      /*                        */
sort_leng = 80                              /* set sort length        */
Call DATA_SORT                              /*                        */
data2   = data                              /*                        */
display = X0B||"----------------------------------------------"
data2   = data2||Left(display,80)           /*                        */
fre_group = cap_group - alo_group           /* calculate total free   */
per_group = ((alo_group/cap_group)*100)     /* get average percentage */
fre_group = Format((fre_group*1024)/10**9,6,0) /* change to GB        */
cap_group = Format((cap_group*1024)/10**9,6,0) /* change to GB        */
display = X0C" "X0B||Left('Total',16)       /*                        */
display = display||Right(cap_group,6)||Right(fre_group,6)
display = display||Right(Trunc(per_group,0),15)||'%'
data2   = data2||Left(display,80)           /*                        */
data2   = data2||X0C||Centre(' End of List ',79,'*')
save_data2 = data2                          /*                        */
Return 0                                    /*                        */
/**********************************************************************/
DISP_VOLUME:                                /*                      ##*/
data3 = ''                                  /*                        */
Address TSO                                 /*                        */
"NewStack"                                  /*                        */
"Alloc Fi(SYSPRINT) Da('NULLFILE') Shr Reu" /*                        */
"Alloc Fi(AMSDUMP) Da('NULLFILE') Shr Reu"  /*                        */
"Alloc Fi(SYSIN) New Lrecl(80) Reuse"       /*                        */
Queue " DCOLLECT -"                         /* dcollect               */
Do parms = 1 to Words(dco_parm)             /*                        */
Queue "  "Word(dco_parm,parms)" -"          /* dcollect selection     */
End                                         /*                        */
Queue "  OUTFILE(OUTDS)"                    /* dcollect output        */
Queue ""                                    /*                        */
"ExecIO * DiskW SYSIN (Finis)"              /*                        */
"Alloc Fi(OUTDS) Cylinders Space(10 10) New Lrecl(340) Recfm(V B) Reu"
"Call *(IDCAMS)"                            /*                        */
"ExecIO * DiskR OUTDS (Stem l. Finis)"      /*                        */
"Free Fi(OUTDS)"                            /*                        */
Do loop = 1 to l.0                          /*                        */
 dcurctyp.loop = Substr(l.loop,5,1)         /* record type            */
 If (dcurctyp.loop = 'V') Then              /* if 'V' type record     */
  dcvvolsr = Substr(l.loop,25,6)            /* volume serial number   */
 If (dcurctyp.loop /= 'D') Then Iterate     /* none dataset record    */
 dcddsnam.loop = Substr(l.loop,25,44)       /* dataset name           */
 dcdflags.loop = Substr(l.loop,69,4)        /* information flags      */
 dcderror.loop = Substr(l.loop,69,1)        /* error information flag */
 dcdflag1.loop = Substr(l.loop,70,1)        /* information flag #1    */
 dcdflag1      = X2b(C2x(dcdflag1.loop))    /* flag #1 as bits        */
 dcdflag2.loop = Substr(l.loop,71,1)        /* information flag #2    */
 dcdflag3.loop = Substr(l.loop,72,1)        /* information flag #3    */
 dcdnovvr.loop = Substr(X2b(C2x(dcdflag2.loop)),1,1) /* no VVR flag   */
 dcddsorg.loop = Substr(l.loop,75,2)        /* dsorg                  */
 dcddsorg      = X2b(C2x(dcddsorg.loop))    /* dsorg as bits          */
 Select                                     /* decode dsorg           */
  When (Substr(dcddsorg,1,1) = '1') Then dsorg = 'IS'
  When (Substr(dcddsorg,2,1) = '1') Then dsorg = 'PS'
  When (Substr(dcddsorg,3,1) = '1') Then dsorg = 'DA'
  When (Substr(dcddsorg,7,1) = '1') Then dsorg = 'PO'
  When (Substr(dcddsorg,8,1) = '1') Then dsorg = 'U '
  When (Substr(dcddsorg,9,1) = '1') Then dsorg = 'GS'
  When (Substr(dcddsorg,13,1) = '1') Then dsorg = 'VS'
  Otherwise dsorg = '??'                    /*                        */
 End                                        /*                        */
 If (Substr(dcdflag1,4,1) = '1') Then dsorg = dsorg||'-E'
 dcdrecrd.loop = Substr(l.loop,77,1)        /* recfm                  */
 dcdrecrd      = X2b(C2x(dcdrecrd.loop))    /* recfm as bits          */
 Select                                     /* decode dsorg           */
  When (Substr(dcdrecrd,1,2) = '10') Then recfm = 'F'
  When (Substr(dcdrecrd,1,2) = '01') Then recfm = 'V'
  When (Substr(dcdrecrd,1,2) = '11') Then recfm = 'U'
  Otherwise recfm = '?'                     /*                        */
 End                                        /*                        */
 If (Substr(dcdrecrd,4,1) = '1') Then recfm = recfm||'B'
 If (Substr(dcdrecrd,3,1) = '1') Then recfm = recfm||'T'
 If (Substr(dcdrecrd,5,1) = '1') Then recfm = recfm||'S'
 If (Substr(dcdrecrd,6,1) = '1') Then recfm = recfm||'A'
 If (Substr(dcdrecrd,7,1) = '1') Then recfm = recfm||'M'
 dcdnmext.loop = Substr(l.loop,78,1)        /* number of extents      */
 dcdvolsr.loop = Substr(l.loop,79,6)        /* volume serial number   */
 dcdvolsr = dcdvolsr.loop                   /*                        */
 dcdnmext = C2d(dcdnmext.loop)              /*                        */
 dcdbklng.loop = Substr(l.loop,85,2)        /* block length           */
 dcdbklng = C2d(dcdbklng.loop)              /*                        */
 dcdlrecl.loop = Substr(l.loop,87,2)        /* lrecl                  */
 dcdlrecl = C2d(dcdlrecl.loop)              /*                        */
 dcdvolsq.loop = Substr(l.loop,123,2)       /* volume sequence number */
 dcdvolsq = C2d(dcdvolsq.loop)              /*                        */
 size_trk = size_trk.dcvvolsr               /* get track size         */
 cat_volume = dcvvolsr                      /* get catalog check vol  */
 dcdallsp.loop = C2d(Substr(l.loop,89,4))/* allocated space           */
 dcdusesp.loop = C2d(Substr(l.loop,93,4))/* used         space        */
 dcdscall.loop = C2d(Substr(l.loop,97,4))/* secondary space alloc     */
 dcdallsp = Format((dcdallsp.loop*1024)/size_trk,6,0) /* conv to trks */
 dcdusesp = Format((dcdusesp.loop*1024)/size_trk,6,0) /* conv to trks */
 dcdscall = Format((dcdscall.loop*1024)/size_trk,6,0) /* conv to trks */
 display = X20" "X0C||Left(dcddsnam.loop,44)/*                        */
 Select                                     /* normal selection       */
  When (sel_v_char = 'C') Then              /* catalog selection      */
   Do                                       /*                        */
    display = display||Right(dcdvolsr,7)    /* add volser             */
    dcddsnam      = dcddsnam.loop           /*                        */
    dsn_cat.dcddsnam = '*Not Cataloged'     /* set cat flag to no     */
    filter        = dcddsnam                /*                        */
    Call CSICODE                            /*                        */
     If (Substr(dsn_cat.dcddsnam,1,1) = '*') Then /*                  */
      high = X0F                            /* highlight red          */
     Else                                   /*                        */
      high = X0D                            /* highlight green        */
     display = display||high||dsn_cat.dcddsnam /* add catalog name    */
   End                                      /*                        */
  When (sel_v_char = 'D') Then              /* normal selection       */
   Do                                       /*                        */
    display = display||Left(" "dsorg,5)     /* add catalog name       */
    display = display||Left(" "recfm,5)     /* add recfm              */
    display = display||Right(dcdallsp,7)    /* add allocated space    */
    display = display||Right(dcdnmext,4)    /* add extents            */
    display = display||Right(dcdbklng,6)    /* add blksize            */
    display = display||Right(dcdlrecl,6)    /* add lrecl              */
   End                                      /*                        */
  When (sel_v_char = 'V') Then              /* normal selection       */
   Do                                       /*                        */
    display = display||Right(dcdallsp,7)    /* add allocated space    */
    display = display||Right(dcdnmext,4)    /* add extents            */
    display = display||Right(dcdvolsq,3)    /* add volseq             */
    display = display||Right(dcdvolsr,7)    /* add volser             */
   End                                      /*                        */
  Otherwise NOP                             /*                        */
 End
 data3 = data3||Left(display,80)||Left(dcdvolsr.loop,6) /*            */
End                                         /*                        */
Select                                      /*                        */
 When (sel_v_char = 'C') Then              /* catalog selection      */
  Do
   disp_pat = '   DATASET                                      '
   disp_pat = disp_pat||'VOLSER CATALOG                   XXX'
  End
 When (sel_v_char = 'D') Then              /* normal selection       */
  Do
   disp_pat = '   DATASET                                      '
   disp_pat = disp_pat||'DSRG RECF SPACE  XT  BLKSZ LRECL XXX'
  End
 When (sel_v_char = 'V') Then              /* normal selection       */
  Do
   disp_pat = '   DATASET                                      '
   disp_pat = disp_pat||'SPACE  XT  V# VOLSER XXX'
  End
 Otherwise NOP
End                                         /*                        */
data    = data3                             /*                        */
sort_parm = sort_parm3                      /*                        */
sort_leng = 86                              /* set sort length        */
Call DATA_SORT                              /*                        */
datav   = over                              /* save volume list       */
data3   = data                              /*                        */
data3   = data3||X0C||Centre(' End of List ',79,'*')
save_data3 = data3                          /*                        */
Return 0                                    /*                        */

/**********************************************************************/
DEFINE_HEX:                                 /* define panel hex     ##*/
X01 = '01'X                                 /* set hex '01' variable  */
X02 = '02'X                                 /* set hex '02' variable  */
X03 = '03'X                                 /* set hex '03' variable  */
X04 = '04'X                                 /* set hex '04' variable  */
X05 = '05'X                                 /* set hex '05' variable  */
X06 = '06'X                                 /* set hex '06' variable  */
X07 = '07'X                                 /* set hex '07' variable  */
X08 = '08'X                                 /* set hex '08' variable  */
X09 = '09'X                                 /* set hex '09' variable  */
X0A = '0A'X                                 /* set hex '0A' variable  */
X0B = '0B'X                                 /* set hex '0B' variable  */
X0C = '0C'X                                 /* set hex '0C' variable  */
X0D = '0D'X                                 /* set hex '0D' variable  */
X0E = '0E'X                                 /* set hex '0E' variable  */
X0F = '0F'X                                 /* set hex '0F' variable  */
X16 = '16'X                                 /* set hex '16' variable  */
X19 = '19'X                                 /* set hex '19' variable  */
X20 = '20'X                                 /* set hex '20' variable  */
X22 = '22'X                                 /* set hex '22' variable  */
X25 = '25'X                                 /* set hex '25' variable  */
X26 = '26'X                                 /* set hex '26' variable  */
X27 = '27'X                                 /* set hex '27' variable  */
X28 = '28'X                                 /* set hex '28' variable  */
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_P_ATTR:                              /* Create attributes    ##*/
Queue ")PANEL KEYLIST(ISRSNAB,ISR)"
Queue ")ATTR DEFAULT("X01||X02||X03") FORMAT(MIX)"
Queue " 04 AREA(DYNAMIC) SCROLL(ON)    EXTEND(ON)"
Queue " 05 TYPE(TEXT)    COLOR(BLUE)"
Queue " 06 TYPE(DATAOUT) COLOR(BLUE)   INTENS(LOW)"
Queue " 07 TYPE(DATAOUT) COLOR(GREEN)  INTENS(HIGH)"
Queue " 08 TYPE(TEXT)    COLOR(WHITE)"
Queue " 09 TYPE(TEXT)    COLOR(RED)"
Queue " 0A TYPE(TEXT)    COLOR(GREEN)"
Queue " 0B TYPE(DATAOUT) COLOR(WHITE)  INTENS(HIGH)"
Queue " 0C TYPE(DATAOUT) COLOR(BLUE)   INTENS(HIGH)"
Queue " 0D TYPE(DATAOUT) COLOR(GREEN)  INTENS(HIGH)"
Queue " 0E TYPE(DATAOUT) COLOR(YELLOW) INTENS(HIGH)"
Queue " 0F TYPE(DATAOUT) COLOR(RED)    INTENS(HIGH)"
Queue " 20 TYPE(DATAIN)  COLOR(TURQ)   HILITE(USCORE)"
Queue " 22 TYPE(TEXT)    COLOR(WHITE)  HILITE(REVERSE)"
Queue " 25 TYPE(OUTPUT)  COLOR(TURQ)   JUST(RIGHT) CAPS(OFF)"
Queue " 26 TYPE(INPUT)   COLOR(TURQ)   HILITE(USCORE)"
Queue " 27 AREA(SCRL)    EXTEND(ON)"
Queue " 28 TYPE(INPUT)   COLOR(RED)"
Queue " 16 TYPE(VOI)     PADC(USER)"      /* variable output info  TL */
Queue " 19 TYPE(DT)"                      /* descriptive text      GL */
Queue ")BODY  CMD(ZCMD)"
Return 0
/**********************************************************************/
DEFINE_P_PROC:                              /* Create processing    ##*/
Queue ")INIT"                               /*                        */
Queue "&ZCMD = ' '"                         /*                        */
Queue ".CURSOR = 'ZCMD'"                    /*                        */
Queue ".HELP = "help                        /*                        */
Queue "VGET (SSCL) ASIS"                    /*                        */
Queue "IF (&SSCL = '')"                     /*                        */
Queue " &SSCL = 'CSR'"                      /*                        */
Queue ")PROC"                               /*                        */
Queue "VPUT (SSCL) PROFILE"                 /*                        */
Queue ")END"                                /*                        */
Return 0
/**********************************************************************/
DEFINE_PANEL0:                              /* Create display 0     ##*/
"NewStack"                                  /* Create new stack       */
member = 'PSPACE00'                         /* set panel name         */
help   = 'TSPACE00'                         /* set help panel name    */
Call DEFINE_P_ATTR
Queue X0A||Centre(X05||"Storage Information"||X0A,78)||X0A
Queue X0A||"Command ===>"||X26||Left("ZCMD",71)||X0A
Queue X0A||" "
Queue X0A||" "
Queue X0A||"  The option you have selected will almost certainly take :"
Queue X0A||" "
Queue X0A||"  a) Quite a long time."
Queue X0A||"  b) Quite a lot of CPU."
Queue X0A||" "
Queue X0A||"  You have been warned ..."
Queue X0A||" "
Queue X0A||"  Are you absolutely certain that you want to do it ?"
Queue X0A||" "
Queue X0A||Centre("        Type"X09"YES"X0A"to continue. ",78)
Queue X0A||" "
Queue X0A||Centre(X08||">>>>"||X28||"CHK"||X08||"<<<<"||X0A,78)
Queue X0A||" "
Queue ")INIT"                               /*                        */
Queue "&ZCMD = ' '"                         /*                        */
Queue ".CURSOR = 'CHK'"                     /*                        */
Queue ".HELP = "help                        /*                        */
Queue ")PROC"                               /*                        */
Queue ")END"                                /*                        */
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_PANEL1:                              /* Create display 1     ##*/
"NewStack"                                  /* Create new stack       */
member = 'PSPACE01'                         /* set panel name         */
help   = 'TSPACE01'                         /* set help panel name    */
Call DEFINE_P_ATTR
Queue X0A||Centre(X05||"Storage Information"||X0A,78)||X0A
text = X0A||"Command ===>"||X26||Left("ZCMD",49)||X0A||"Scroll ===>"
Queue text||X26||Left("SSCL",4)||X0A
Queue X25||"ROWT"
text = X08||"                      Vol   Total    Free  Pct"
Queue text||X22||"0  1  2  3  4  5  6  7  8  9  1"X08
text = X08||"S StoGroup              #    (Gb)    (Gb)  Usd"
Queue text||X22||"0  0  0  0  0  0  0  0  0  0  0"X08
text = X08||"_ ___________________ ___ _______ _______ ____"
Queue text||X22||"+..+..+..+..+..+..+..+..+..+..0"X08
Queue X04||"DATA1"Left("",73)||X04
Call DEFINE_P_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_PANEL2:                              /* Create display 2     ##*/
"NewStack"                                  /* Create new stack       */
member = 'PSPACE02'                         /* set panel name         */
help   = 'TSPACE02'                         /* set help panel name    */
Call DEFINE_P_ATTR
Queue X0A||Centre(X05||"Storage Information - "sel_group||X0A,78)||X0A
text = X0A||"Command ===>"||X26||Left("ZCMD",49)||X0A||"Scroll ===>"
Queue text||X26||Left("SSCL",4)||X0A
Queue X25||"ROWT"
text = X08||"         Dev  Dev   Capa  Free  Cntg Frag  Pct"
Queue text||X22||"0  1  2  3  4  5  6  7  8  9  1"X08
text = X08||"S Volser Addr Type  (Gb)  (Gb)   Cyl Indx  Usd"
Queue text||X22||"0  0  0  0  0  0  0  0  0  0  0"X08
text = X08||"_ ______ ____ ____ _____ _____ _____ ____ ____"
Queue text||X22||"+..+..+..+..+..+..+..+..+..+..0"X08
Queue X04||"DATA2"Left("",73)||X04
Call DEFINE_P_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_PANEL3:                              /* Create display 3     ##*/
"NewStack"                                  /* Create new stack       */
member = 'PSPACE03'                         /* set panel name         */
help   = 'TSPACE03'                         /* set help panel name    */
Call DEFINE_P_ATTR
Queue X0A||Centre(X05||"Storage Information - "sel_volume||X0A,78)||X0A
text = X0A||"Command ===>"||X26||Left("ZCMD",49)||X0A||"Scroll ===>"
Queue text||X26||Left("SSCL",4)||X0A
Queue X25||"ROWT"
Select
 When (sel_v_char = 'C') Then
  Do
   text = X08||"S Dataset Name                                 Volser"
   Queue text||" Catalog"X08
   text = X08||"_ ____________________________________________ ______"
   Queue text||" ____________________________"X08
  End
 When (sel_v_char = 'D') Then
  Do
   text = X08||"                                              "
   Queue text||"           Space                 "
   text = X08||"S Dataset Name                                "
   Queue text||" DSrg RecF (trks) Xt  Blksz Lrecl"
   text = X08||"_ ____________________________________________"
   Queue text||" ____ ____ ______ ___ _____ _____"X08
  End
 When (sel_v_char = 'V') Then
  Do
   text = X08||"                                              "
   Queue text||" Space               "
   text = X08||"S Dataset Name                                "
   Queue text||" (trks) Xt  V# Volser"
   text = X08||"_ ____________________________________________"
   Queue text||" ______ ___ __ ______"X08
  End
 Otherwise NOP
End
Queue X04||"DATA3"Left("",73)||X04
Call DEFINE_P_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_T_ATTR:                              /* Create attributes    ##*/
Queue ")PANEL KEYLIST (ISRHELP ISR)"
Queue ")ATTR"
Queue "   % TYPE(ET)"
Queue "   _ TYPE(NEF) PAD(USER) CAPS(ON)"
Queue "   + TYPE(NT)"
Queue "   # TYPE(SAC)"
Queue "   $ TYPE(OUTPUT) JUST(RIGHT) INTENS(HIGH)"
Queue ")BODY CMD(ZCMD)"
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_T_PROC:                              /* Create processing    ##*/
Queue ")INIT"
Queue "&ZCMD = ' '"
Queue ")PROC"
Queue "&ZUP = TSPACE00"
Queue ")END"
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_TUTOR0:                              /* Create tutorial 1    ##*/
"NewStack"                                  /* Create new stack       */
member = 'TSPACE00'                         /* set panel name         */
Call DEFINE_T_ATTR
Queue "%Tutorial "||Centre("Storage Information",62)||"Tutorial%"
Queue "%"||Left("Option  ===>_ZCMD",78)||"+"
Queue "% "
Queue "%       This utility displays SMS storage groups and/or volume"
Queue "%       detail for the system it is executed on."
Queue "% "
Queue "%       It may be invoked using#SPACE%which will display all SMS"
Queue "%       storage groups on the system. Together with the group of"
Queue "%       non-SMS volumes on the system."
Queue "% "
Queue "%       For a subset of volumes, invoke as#SPACE VOLUME(volser)%"
Queue "%                                         #SPACE VOL(volser)%"
Queue "%                                         #SPACE V(volser)%"
Queue "% "
Queue "%                                       or#SPACE POOL(sgname)%"
Queue "%                                         #SPACE P(sgname)%"
Queue "% "
Queue "%       Wildcarding can be used e.g. *vol *vol* vol*"
Queue "% "
Queue "%       Type#REFRESH%to refresh the display"
Call DEFINE_T_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_TUTOR1:                              /* Create tutorial 1    ##*/
"NewStack"                                  /* Create new stack       */
member = 'TSPACE01'                         /* set panel name         */
Call DEFINE_T_ATTR
Queue "%Tutorial "||Centre("Storage Information",62)||"Tutorial%"
Queue "%"||Left("Option  ===>_ZCMD",78)||"+"
Queue "% "
Queue "%       This panel displays all of the SMS Storage Groups available"
Queue "%       on the system together with their volume count and usage."
Queue "% "
Queue "%       Options available are :"
Queue "% "
Queue "%      #C%Catalog status"
Queue "%      #D%Dataset Allocation Details"
Queue "%      #S%Volume details (includes capacity/usage details)"
Queue "%      #V%Dataset Space/Xt/Volume/Volseq details"
Queue "% "
Queue "%       The display can be sorted using#SORT field A/D%."
Queue "% "
Queue "%       Valid fields are :"
Queue "% "
Queue "%      #STOGROUP VOL TOTAL FREE PCT%"
Queue "% "
Queue "%       Type#REFRESH%to refresh the display"
Call DEFINE_T_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_TUTOR2:                              /* Create tutorial 2    ##*/
"NewStack"                                  /* Create new stack       */
member = 'TSPACE02'                         /* set panel name         */
Call DEFINE_T_ATTR
Queue "%Tutorial "||Centre("Storage Information",62)||"Tutorial%"
Queue "%"||Left("Option  ===>_ZCMD",78)||"+"
Queue "% "
Queue "%       Displays all of the volumes defined in a selected SMS Storage"
Queue "%       Group together with their capacity and usage details."
Queue "% "
Queue "%       Options available are :"
Queue "% "
Queue "%      #C%Catalog status"
Queue "%      #D%Dataset Allocation Details"
Queue "%      #S%Normal '3.4' display"
Queue "%      #V%Dataset Space/Xt/Volume/Volseq details"
Queue "% "
Queue "%       The display can be sorted using#SORT field A/D%."
Queue "% "
Queue "%       Valid fields are :"
Queue "% "
Queue "%      #VOLSER ADDR TYPE CAPA FREE CNTG FRAG PCT"
Queue "% "
Queue "%       Type#REFRESH  %to refresh the display"
Queue "%       Type#FULLC/D/V%to list ALL datasets in the pool"
Call DEFINE_T_PROC
Return 0                                    /*                        */
/**********************************************************************/
DEFINE_TUTOR3:                              /* Create tutorial 3    ##*/
"NewStack"                                  /* Create new stack       */
member = 'TSPACE03'                         /* set panel name         */
Call DEFINE_T_ATTR
Queue "%Tutorial "||Centre("Storage Information",62)||"Tutorial%"
Queue "%"||Left("Option  ===>_ZCMD",78)||"+"
Queue "% "
Queue "%       Displays all of the datasets on selected volume/s."
Queue "% "
Queue "%       Together with either their allocation details, their "
Queue "%       space utilisation or their catalog status."
Queue "% "
Queue "%       For all, the options available are :"
Queue "% "
Queue "%      #B%Browse"
Queue "%      #E%Edit"
Queue "%      #S%Edit"
Queue "%      #V%View"
Queue "% "
Queue "%       The display can be sorted using#SORT field A/D%."
Queue "% "
Queue "%       Valid fields are :"
Queue "% "
Queue "%      #DATASET VOLSER CATALOG DSRG RECF SPACE XT BLKSZ LRECL"
Call DEFINE_T_PROC
Return 0                                    /*                        */
/**********************************************************************/
CREATE_PDS:                                 /* Create Member in PDS   */
Do loop = 1 To 50                           /* loop thru up to 50     */
 fil = 'DYNAM'||loop                        /*  build filename        */
 x = Listdsi(fil FILE)                      /*  test filename         */
 If (sysreason > 0) Then                    /*  if not present        */
  Leave                                     /*   use it !             */
End                                         /* end loop               */
Address TSO                                 /* set address            */
"Alloc Fi("fil") ",                         /* Allocate dyamic        */
      "Lrecl(80) Blksize(0) RecFm(F B) ",   /*  dataset to selected   */
      "Cylinders Space(1,1) ",              /*   filename             */
      "Unit(SYSDA) Dir(20) New Reu"         /*                        */
X = Listdsi(fil FILE)                       /* get the file details   */
Return 0                                    /*                        */
/**********************************************************************/
CREATE_MEMBER:                              /* Create Member in PDS   */
stack = Queued()                            /*   get stack size       */
If (stack > 0) Then                         /*   if data on stack     */
 Do                                         /*                        */
  "Alloc Fi(MEMOUT) Shr Reu ",              /*    create member       */
        "Da('"sysdsname"("member")')"       /*                        */
  "ExecIO "stack" DiskW MEMOUT (Finis)"     /*    write stack > member*/
  "Free Fi(MEMOUT)"                         /*    free member         */
 End                                        /*                        */
/* Debug code
Address ISPEXEC "Edit Dataset('"sysdsname"') Volume("sysvolume")"
*/
"DelStack"                                  /* Clear stack            */
Return 0                                    /*                        */
/**********************************************************************/
DATA_SORT:                                  /*                      ##*/
scnt = 0                                    /*                        */
last_rec = (Length(data)-sort_leng)+1       /* calculate last record  */
Do pass = 1 To last_rec By sort_leng        /*                        */
 scnt = scnt + 1                            /*                        */
 sort.scnt = Substr(data,pass,sort_leng)    /*                        */
End                                         /*                        */
Address TSO                                 /*                        */
If (sort_parm = '') Then                    /*                        */
 sysin.1 = '  SORT FIELDS=(1,20,CH,A)'      /*                        */
Else                                        /*                        */
 sysin.1 = '  SORT FIELDS=('sort_parm')'    /*                        */
"Alloc Fi(SYSIN)   Space(1 1) Cylinders Unit(3390) ",
                             "Lrecl(80) Blksize(0) New Reu"
"ExecIO 1 DiskW SYSIN (Finis Stem sysin.)"
"Alloc Fi(SORTIN)  Space(1 1) Cylinders Unit(3390) ",
                             "Lrecl("sort_leng") Blksize(0) New Reu"
"ExecIO "scnt" DiskW SORTIN (Finis Stem sort.)"
/* Debug code
X = Listdsi(SORTIN FILE)                    /* get the file details   */
Address ISPEXEC "Edit Dataset('"sysdsname"') Volume("sysvolume")"
*/
"Alloc Fi(SORTOUT) Space(1 1) Cylinders Unit(3390) ",
                             "Lrecl("sort_leng") Blksize(0) New Reu"
"Alloc Fi(SYSOUT)  Space(1 1) Cylinders Unit(3390) ",
                             "Lrecl(80) Blksize(0) New Reu"
Address ATTCHMVS "SORT"                     /*                        */
"ExecIO * DiskR SORTOUT (Finis Stem sort.)" /*                        */
"Free Fi(SORTIN SORTOUT SYSIN SYSOUT)"      /*                        */
data = ''                                   /*                        */
over = ''                                   /* 'overspill' variable   */
If (sort_leng = 80) Then                    /*                        */
 Do pass = 1 To scnt                        /*                        */
  data = data||sort.pass                    /*                        */
 End                                        /*                        */
Else                                        /*                        */
 Do pass = 1 to scnt                        /*                        */
  data = data||Substr(sort.pass,1,80)       /*                        */
  over = over||Substr(sort.pass,81)         /* capture 'overspill'    */
 End                                        /*                        */
Return 0                                    /*                        */
/**********************************************************************/
SORT_DECODE:                                /* decode sort parms    ##*/
fld = Word(zcmd,2)                          /*                        */
ord = Word(zcmd,3)                          /*                        */
plc = WordPos(fld,disp_pat)                 /*                        */
If (plc = 0) Then                           /*                        */
 Do                                         /*                        */
  If (fld /= '') Then                       /*                        */
   Do                                       /*                        */
    zerralrm = 'YES'                        /*                        */
    zerrhm = 'TSPACE00'                     /*                        */
    zerrsm = 'Not a valid name'             /*                        */
    zerrlm = field' no a valid name, reselect and try again.' /*      */
    Address ISPEXEC "Setmsg Msg(ISRZ002)"   /* general error messageid*/
   End                                      /*                        */
  Else                                      /*                        */
   sort_parm = ''                           /*                        */
 End                                        /*                        */
Else                                        /*                        */
 Do                                         /*                        */
  col = Wordindex(disp_pat,plc)             /*                        */
  nex = Wordindex(disp_pat,plc+1)-1         /*                        */
  len = nex-col                             /*                        */
  If (ord /= 'D') &,                        /*                        */
     (ord /= 'A') Then                      /*                        */
   ord = 'A'                                /*                        */
  sort_parm = col','len',CH,'ord            /*                        */
 End                                        /*                        */
Return 0                                    /*                        */
/**********************************************************************/
/**********************************************************************/
/* CSICODE : Uses Catalog Search Interface (CSI)                      */
/**********************************************************************/
CSICODE:                             /* CSI processing              ##*/
/**********************************************************************/
/* Initialise the relevant CSI variables                              */
/**********************************************************************/
cat.1 = ' '                          /* Set catalog name              */
flt   = filter                       /* Set the filter                */
typ   = ' '                          /* Set entry types required      */
ct1   = ' '                          /* Set for 1 catalog only        */
/**********************************************************************/
/* Initialise the various totals variables                            */
/**********************************************************************/
Call TOT_INIT                        /* Initialise totals             */
/**********************************************************************/
/* CSI Processing section                                             */
/**********************************************************************/
x = CSI(cat.1,flt,typ,ct1)           /* Call CSI procedure            */
/**********************************************************************/
Return 0                             /* Return                        */
/**********************************************************************/
/**********************************************************************/

/**********************************************************************/
/**********************************************************************/
CSI:                                 /* CSI procedure start         ##*/
Arg cat,flt,typ,ct1                  /* get passed arguments          */
/**********************************************************************/
/* Initialise the parameter list                                      */
/**********************************************************************/
modrsnrc = Substr(' ',1,4)           /* clear module/return/reason    */
csifiltk = Substr(flt,1,44)          /* move filter key into list     */
csicatnm = Substr(cat,1,44)          /* clear catalog name            */
csiresnm = Substr(' ',1,44)          /* clear resume name             */
csidtyps = Substr(typ,1,16)          /* clear entry types             */
csicldi  = Substr('Y',1,1)           /* indicate data and index       */
csiresum = Substr(' ',1,1)           /* clear resume flag             */
csis1cat = Substr(ct1,1,1)           /* indicate search > 1 catalogs  */
/**********************************************************************/
bcp = mvsvar('sysmvs')               /*                               */
lev = Substr(bcp,3,1)||Substr(bcp,5,1)||Substr(bcp,7,1) /*            */
If (lev > 609) Then                  /* os/390 R10 and up for fullword*/
 csioptns = Substr('F',1,1)          /*'F'for fullword,' 'for halfword*/
Else                                 /*                               */
 csioptns = Substr(' ',1,1)          /*'F'for fullword,' 'for halfword*/
/**********************************************************************/
/* Initialise requested fields                                        */
/**********************************************************************/
csinumen = '0006'X                   /* init number of fields         */
csifld01 = Left('ENTYPE  ',8)        /* type of entry                 */
csifld02 = Left('ENTNAME ',8)        /* name of entry                 */
csifld03 = Left('TYPE    ',8)        /* type of associated entry      */
csifld04 = Left('NAME    ',8)        /* name of associated entry      */
csifld05 = Left('VOLSER  ',8)        /* Volume serial number          */
csifld06 = Left('FILESEQ ',8)        /* File Sequence number          */
/**********************************************************************/
/* Build the selection criteria fields part of parameter list         */
/**********************************************************************/
csiopts  = csicldi ||csiresum||csis1cat||csioptns
csifield = csifiltk||csicatnm||csiresnm||csidtyps||csiopts ||csinumen
csifield = csifield||csifld01||csifld02||csifld03||csifld04||csifld05
csifield = csifield||csifld06
/**********************************************************************/
/* Initialise and build work are output part of parameter list        */
/**********************************************************************/
csiusrln = 524288                    /* CSIUSRLN work area length     */
                                     /* range from 1024 to 1048575    */
dwork = Right(D2c(csiusrln),4,'00'X)||Copies('00'X,csiusrln-4)
/**********************************************************************/
/* Initialise work variables                                          */
/**********************************************************************/
csiresum = 'Y'
/**********************************************************************/
/* Set up loop for resume (if a resume is necessary)                  */
/**********************************************************************/
Do While csiresum = 'Y'
/**********************************************************************/
/* Issue link to CSI - Catalog Search Interface                       */
/**********************************************************************/
 Address LinkPGM 'IGGCSI00 modrsnrc csifield dwork'
 r15 = rc                            /* get returned code             */
 mod = Substr(modrsnrc,1,2)          /* get module code               */
 res = C2d(Substr(modrsnrc,3,1))     /* get return code               */
 ret = C2d(Substr(modrsnrc,4,1))     /* get reason code               */
 If (r15 > 0) Then                   /* when error occured            */
  Do
   Say '**(Error-1)* CSI processing.'
   Say '**(Error-2)* R15='r15 'Module='mod' Return='ret' Reason='res
  End
/**********************************************************************/
 csiresum = Substr(csifield,150,1)   /* Get resume flag for next loop */
 csiresnm = Substr(csifield,89,44)   /* Get resume name for next loop */
 csiusrln = C2D(Substr(dwork,1,4))   /* Get length of work area       */
 csireqln = C2D(Substr(dwork,5,4))   /* Get length of work area reqd  */
 csiusdln = C2D(Substr(dwork,9,4))   /* Get length of work area used  */
 If (csireqln > csiusrln) Then       /*                               */
  Do                                 /*                               */
   Say '**(Error-1)* Work Area defined  = 'csiusrln
   Say '**(Error-2)* Work Area used     = 'csiusdln
   Say '**(Error-3)* Work Area required = 'csireqln
   Say '**(Error-4)* Increase the work area defined - CSIUSRLN.'
  End                                /*                               */
 If (csiusdln < 65) Then Leave       /* No entries returned           */
 off = 15                            /* Starting position             */
/**********************************************************************/
/* Process data returned in work area                                 */
/**********************************************************************/
 Do While off < csiusdln             /* do until all data is processed*/
  csi_flag = Substr(dwork,off,1)     /* get the flag byte             */
  csi_type = Substr(dwork,off+1,1)   /* get the entry type            */
  csi_name = Substr(dwork,off+2,44)  /* get the entry name            */
  csi_retn = Substr(dwork,off+46,4)  /* get the return code           */
  mod = Substr(csi_retn,1,2)         /* get CSI module                */
  res = C2d(Substr(csi_retn,3,1))    /* get reason code               */
  ret = C2d(Substr(csi_retn,4,1))    /* get return code               */
  If (csi_type = '0') Then           /* Catalog entry                 */
   Do                                /*                               */
    If (ret > 0) Then                /* test catalog return code      */
     Do
      Say '**(Error-1)* Catalog processing - 'Strip(csi_name,B)'.'
      Say '**(Error-2)* Module='mod' Return='ret' Reason='res
     End
    csicname = csi_name              /* set the catalog name          */
    plus = 50                        /* length for catalog entry      */
   End                               /*                               */
  Else                               /*                               */
   Do                                /*                               */
    csiename = csi_name              /* use the entry name            */
    csietype = csi_type              /* use the entry name            */
    csieflag = X2b(C2x(csi_flag))    /* use the entry flag            */
    csienter = Substr(csieflag,2,1)  /* get the entry error flag      */
    csiedata = Substr(csieflag,3,1)  /* get the data indication flag  */
    If (csioptns = 'F') Then         /* check if fullword requested   */
     csitotln = C2d(Substr(csi_retn,1,4))/* get entry total length    */
    Else                             /* otherwise (default halfword)  */
     csitotln = C2d(Substr(csi_retn,1,2))/* get entry total length    */
    If (csienter = '1') Then         /* entry error                   */
     Do
      Say '**(Error-1)* Entry processing - 'Strip(csi_name,B)'.'
      Say '**(Error-2)* Module='mod' Return='ret' Reason='res
      plus = 50                      /* length for error entry        */
     End
    Else                             /*                               */
     Do                              /*                               */
      Call ENTRY                     /* Execute entry processing      */
      plus = 46 + csitotln           /* length for normal entry       */
     End                             /*                               */
   End                               /*                               */
/**********************************************************************/
/*                                                                    */
/**********************************************************************/
   Call DATA_HANDLING                /*                               */
/**********************************************************************/
/* increment for next entry                                           */
/**********************************************************************/
  off = off + plus                   /* build new offset              */
 End                                 /*                               */
End                                  /*                               */
/**********************************************************************/
/* Complete CSI Procedure                                             */
/**********************************************************************/
Return 0                             /*                               */
/**********************************************************************/

/**********************************************************************/
/* Process entry fields to extract data                               */
/**********************************************************************/
ENTRY:                               /* Start entry processing      ##*/
/**********************************************************************/
/* entry field size and location extraction                           */
/**********************************************************************/
If (csioptns = 'F') Then             /* check if fullword requested   */
 Do                                  /* field length length of 4      */
  e_off = off + 46                   /* get offset to entries         */
  o_fld.1 = e_off+8+(C2d(csinumen)*4)/* get first field offset        */
  l_fld.1 = C2d(Substr(dwork,e_off+8,4)) /* get first field length    */
  e_pos = 12                         /* set offset of second field    */
  If (debug = 1) Then                /*                               */
   Do                                /*                               */
    Say "e_off="e_off                /*                               */
    Say "C=<"Substr(dwork,e_off,200)">" /*                            */
    Say "X=<"C2x(Substr(dwork,e_off,200))">" /*                       */
    Say "o_fld.1="o_fld.1",hex="C2x(o_flds.1) /*                      */
    Say "l_fld.1="l_fld.1",hex="C2x(l_flds.1) /*                      */
   End                               /*                               */
  Do flds = 2 to C2d(csinumen)       /* loop through other fields     */
   prv = flds - 1                    /* set 'previous' value          */
   o_fld.flds = o_fld.prv + l_fld.prv/* get next offset               */
   l_fld.flds = C2d(Substr(dwork,e_off+e_pos,4)) /* get next length   */
   e_pos = e_pos + 4                 /*                               */
   If (debug = 1) Then               /*                               */
    Do                               /*                               */
     Say "o_fld."flds"="o_fld.flds",hex="C2x(o_flds.flds) /*          */
     Say "l_fld."flds"="l_fld.flds",hex="C2x(l_flds.flds) /*          */
    End                              /*                               */
  End                                /*                               */
 End                                 /*                               */
Else                                 /* otherwise (default halfword)  */
/**********************************************************************/
 Do                                  /* field length length of 4      */
  e_off = off + 46                   /* get offset to entries         */
  o_fld.1 = e_off+4+(C2d(csinumen)*2)/* get first field offset        */
  l_fld.1 = C2d(Substr(dwork,e_off+4,2)) /* get first field length    */
  e_pos = 6                          /* set offset of second field    */
  If (debug = 1) Then                /*                               */
   Do                                /*                               */
    Say "e_off="e_off                /*                               */
    Say "C=<"Substr(dwork,e_off,200)">" /*                            */
    Say "X=<"C2x(Substr(dwork,e_off,200))">" /*                       */
    Say "o_fld.1="o_fld.1",hex="C2x(o_flds.1) /*                      */
    Say "l_fld.1="l_fld.1",hex="C2x(l_flds.1) /*                      */
   End                               /*                               */
  Do flds = 2 to C2d(csinumen)       /* loop through other fields     */
   prv = flds - 1                    /* set 'previous' value          */
   o_fld.flds = o_fld.prv + l_fld.prv/* get next offset               */
   l_fld.flds = C2d(Substr(dwork,e_off+e_pos,2)) /* get next length   */
   e_pos = e_pos + 2                 /*                               */
   If (debug = 1) Then               /*                               */
    Do                               /*                               */
     Say "o_fld."flds"="o_fld.flds",hex="C2x(o_flds.flds) /*          */
     Say "l_fld."flds"="l_fld.flds",hex="C2x(l_flds.flds) /*          */
    End                              /*                               */
  End                                /*                               */
 End                                 /*                               */
/**********************************************************************/
/* entry field extraction                                             */
/**********************************************************************/
entype   = Substr(dwork,o_fld.1,l_fld.1)   /* Type of entry           */
entname  = Substr(dwork,o_fld.2,l_fld.2)   /* Name of entry           */
type     = Substr(dwork,o_fld.3,l_fld.3)   /* Type of assc entry      */
name     = Substr(dwork,o_fld.4,l_fld.4)   /* Name of assc entry      */
volser   = Substr(dwork,o_fld.5,l_fld.5)   /* volume serial           */
fileseq  = Substr(dwork,o_fld.6,l_fld.6)   /* file sequence           */
/**********************************************************************/
/* entry re-processing section                                        */
/**********************************************************************/
If (Index(csifield,'ENTYPE') > 0) Then   /*                           */
 Call FLD_ENTYPE                         /*                           */
If (Index(csifield,'ENTNAME') > 0) Then  /*                           */
 Call FLD_ENTNAME                        /*                           */
If (Index(csifield,'FILESEQ') > 0) Then  /*                           */
 Call FLD_FILESEQ                        /*                           */
If (Index(csifield,'VOLSER') > 0) Then   /*                           */
 Call FLD_VOLSER                         /*                           */
/**********************************************************************/
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTYPE   - Process ENTYPE   field                              */
/**********************************************************************/
FLD_ENTYPE:                          /* ENTYPE   field processing   ##*/
Select                               /* decode type flag              */
 When (entype = 'C') Then entype = 'CLUSTER'  /*                      */
 When (entype = 'D') Then entype = 'DATA'     /*                      */
 When (entype = 'I') Then entype = 'INDEX'    /*                      */
 When (entype = 'A') Then entype = 'NONVSAM'  /*                      */
 When (entype = 'H') Then entype = 'GDS'      /*                      */
 When (entype = 'B') Then entype = 'GDG'      /*                      */
 When (entype = 'R') Then entype = 'PATH'     /*                      */
 When (entype = 'G') Then entype = 'AIX'      /*                      */
 When (entype = 'X') Then entype = 'ALIAS'    /*                      */
 When (entype = 'U') Then entype = 'UCAT'     /*                      */
 Otherwise                           /*                               */
  Say '**(Error-1)* Entry type processing for 'Strip(entname,T)
  Say '**(Error-2)* Entry type ='entype' X=<'C2x(entype)'>'
  entype = ' '                       /* unknown type                  */
End                                  /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTNAME  - Process ENTNAME  field                              */
/**********************************************************************/
FLD_ENTNAME:                         /* ENTNAME  field processing   ##*/
If (Substr(entname,1,2) = '0000'x) Then /* If blank dsname            */
 entname = Left(C2x(entname),44)     /* Return hex value              */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_VOLSER   - Process VOLSER   field                              */
/**********************************************************************/
FLD_VOLSER:                          /* VOLSER   field processing   ##*/
volsers = ''                         /*                               */
Do v_pos = 1 To Length(volser) By 6  /*                               */
 volume = Substr(volser,v_pos,6)     /*                               */
 If (Substr(volume,1,2) = '00'x) Then/*                               */
  volume = '000000'                  /*                               */
 volume = Right(Strip(volume,B),6)' '/*                               */
 volsers = volsers||'  '||volume     /*                               */
End                                  /*                               */
volser = Strip(volsers,B)            /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_FILESEQ  - Process FILESEQ  field                              */
/**********************************************************************/
FLD_FILESEQ:                         /* FILESEQ  field processing   ##*/
build = ''                           /*                               */
Do f_pos = 1 To Length(fileseq) By 2 /*                               */
 build = build||Right(X2d(C2x(Substr(fileseq,f_pos,2))),8)||' '
End                                  /*                               */
fileseq = build                      /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* TOT_INIT - Initialise the various totals variables                 */
/**********************************************************************/
TOT_INIT:                            /* Initialise totals variables ##*/
l_cnt   = 0                          /* Initialise output line count  */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* DATA_HANDLING - Carry out whatever processing is required ...      */
/**********************************************************************/
DATA_HANDLING:                       /* 'Handle' the data produced  ##*/
If (csi_type = '0') Then             /* Catalog entries               */
 Do                                  /*                               */
 End                                 /*                               */
Else                                 /* Non-Catalog entries           */
 Do                                  /*                               */
  If (Pos(cat_volume,volser) > 0) Then /* If volser matches selected  */
   Do                                /*                               */
    dsn_cat.entname = csicname       /*  set catalog for dataset      */
   End                               /*                               */
  If (Pos('&',volser) > 0) Then      /* check for system symbolic     */
   Do                                /*                               */
    Do syms = 1 to Words(volser)     /*                               */
     symchk = Word(volser,syms)      /*                               */
     symres = MvsVar('SYMDEF',Strip(symchk,B,'&')) /*                 */
     If (cat_volume = symres) Then   /*                               */
      Do                             /*                               */
       dsn_cat.entname = csicname    /*  set catalog for dataset      */
       Leave                         /*                               */
      End                            /*                               */
    End                              /*                               */
   End                               /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/
