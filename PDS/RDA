/* REXX - RDA : SDSF DA 'replacement' code                            */
/**********************************************************************/
/* Written : A.J.Gray - 20/03/1997                                    */
/* Updated : A.J.Gray - 15/04/2002 - Changed to be a standalone util  */
/* Updated : A.J.Gray - 09/08/2002 - tweak before adding to CBT       */
/* Updated : A.J.Gray - 14/11/2002 - Changed SYSDA to SYSALLDA        */
/**********************************************************************/
/* This function displays a number of fields that you would normally  */
/* see using the SDSF DA command. It doesn't show all of them and it  */
/* doesn't do anything else than display them.                        */
/* See also RINIT                                                     */
/**********************************************************************/
/* Most people won't need this at all !                               */
/* However I have had brief periods when this was useful, so I thought*/
/* I'd add it anyway as you never know ;-)#                           */
/**********************************************************************/
/* display information                                                */
/**********************************************************************/
Call DEFINE_HEX                             /* define hex variables   */
prc = 0                                     /* initialise panel return*/
Do While prc = 0                            /* redisplay loop         */
 Call GET_INFO_DA                           /* Get the DA information */
 Call DEFINE_PANEL                          /* define the panel       */
 Call CREATE_MEMBER                         /* create the panel member*/
 Address ISPEXEC "LibDef ISPPLIB Library Id("fil") Stack"
 Address ISPEXEC "Display Panel(DAINFO)"    /* display the panel      */
 prc = rc                                   /* get panel return       */
 Address ISPEXEC "LibDef ISPPLIB"           /* clear the temp alloc   */
 Address TSO     "Free Fi("fil")"           /* free the temp dsn      */
End                                         /*                        */
Exit 0                                      /* exit the exec          */
/**********************************************************************/
/**********************************************************************/
GET_INFO_DA:                                /*                      ##*/
Numeric Digits 20                           /*                        */
cvt      = Storage(10,4)                    /* get CVT address        */
cvtasvt  = Storage(D2x(C2d(cvt)+556),4)     /* get ASVT address       */
asvtmaxu = Storage(D2x(C2d(cvtasvt)+516),4) /*                        */
asvtaav  = Storage(D2x(C2d(cvtasvt)+480),4) /*                        */
ascb_cnt = 0                                /* initialise ascb_cnt    */
offst = 528                                 /* set offset             */
Do loop = 1 To C2d(asvtmaxu)                /*                        */
 ascbadd  = Storage(D2x(C2d(cvtasvt)+offst),4) /*                     */
 ascbascb = Storage(D2x(C2d(ascbadd)+0),4)  /*                        */
 If (ascbascb = 'ASCB') Then                /*                        */
  Do                                        /*                        */
   ascbdp   = Storage(D2x(C2d(ascbadd)+43),1)  /* get dispatching pri */
   ascbdp   = Left(C2x(ascbdp),2)              /*                     */
   dp       = ascbdp                           /*                     */
   ascbjstl = Storage(D2x(C2d(ascbadd)+80),4)  /*                     */
   ascbjstl = C2d(ascbjstl)                    /*                     */
   ascbrctf = Storage(D2x(C2d(ascbadd)+102),1) /*                     */
   ascbrctf = X2b(C2x(ascbrctf))               /*                     */
   ascbflg1 = Storage(D2x(C2d(ascbadd)+103),1) /*                     */
   ascbflg1 = X2b(C2x(ascbflg1))               /*                     */
   ascbflg2 = Storage(D2x(C2d(ascbadd)+115),1) /*                     */
   ascbflg2 = X2b(C2x(ascbflg2))               /*                     */
   ascboucb = Storage(D2x(C2d(ascbadd)+144),4) /*                     */
   oucbsfl  = Storage(D2x(C2d(ascboucb)+17),1) /*                     */
   oucbsfl  = X2b(C2x(oucbsfl))                /*                     */
   oucbsrc  = Storage(D2x(C2d(ascboucb)+41),1) /* swap out reason code*/
   oucbusrd = Storage(D2x(C2d(ascboucb)+208),8)/* get owner           */
   owner    = oucbusrd                         /*                     */
   oucbspg  = Storage(D2x(C2d(ascboucb)+182),2)/* get pgn             */
   pgn      = Right(C2d(oucbspg),3)            /*                     */
   ascbjbni = Storage(D2x(C2d(ascbadd)+172),4) /* get the jobname addr*/
   If (C2d(ascbjbni) > 0) Then
    Do
     jobnamei = Storage(D2x(C2d(ascbjbni)+0),8)/* get the jobname     */
     /* ascbjbni = address of chname in cscx for job so ...           */
     chcscbp  = Storage(D2x((C2d(ascbjbni)-24)+32),4) /* get cscb addr*/
     j_cscb     = D2c(C2d(chcscbp)-8)       /*                        */
     j_chkey    = Storage(D2x(C2d(chcscbp)+8),8)   /*                 */
     j_chprocsn = Storage(D2x(C2d(chcscbp)+32),8)  /*                 */
     j_chstep   = Storage(D2x(C2d(chcscbp)+64),8)  /*                 */
     j_chjbflgs = Storage(D2x(C2d(chcscbp)+176),1) /*                 */
     j_chjbflgs = X2b(C2x(j_chjbflgs))      /*                        */
     If (Substr(j_chjbflgs,1,1) = '1') Then /* if jobname= on jobcard */
      j_chmemnam = Storage(D2x(C2d(chcscbp)+224),8)/*                 */
     Else                                   /*                        */
      j_chmemnam = Left('',8)               /*                        */
    End                                     /*                        */
   ascbjbns = Storage(D2x(C2d(ascbadd)+176),4) /* get the jobname addr*/
   jobnames = Storage(D2x(C2d(ascbjbns)+0),8)  /* get the jobname     */
   test = C2x(Substr(jobnamei,1,2))         /*                        */
   If (C2d(ascbjbni) = 0) Then              /*                        */
    jobname = jobnames                      /*                        */
   Else                                     /*                        */
    jobname = jobnamei                      /*                        */
   ascbrsme = Storage(D2x(C2d(ascbadd)+364),4) /* get the rax addr    */
   raxfmct  = Storage(D2x(C2d(ascbrsme)+44),4) /* get the frame count */
   real     = Right(C2d(raxfmct),4)         /*                        */
   ascbcscb = Storage(D2x(C2d(ascbadd)+56),4)  /* get CSCB address    */
   chain    = Storage(D2x(C2d(ascbcscb)+0),256)/*                     */
   chsts    = Storage(D2x(C2d(ascbcscb)+6),1)  /*                     */
   chsts    = X2b(C2x(chsts))                  /*                     */
   chact    = Storage(D2x(C2d(ascbcscb)+7),1)  /*                     */
   chact    = X2b(C2x(chact))                  /*                     */
   chkey    = Storage(D2x(C2d(ascbcscb)+8),8)  /*                     */
   chcls    = Storage(D2x(C2d(ascbcscb)+16),8) /*                     */
   chprocsn = Storage(D2x(C2d(ascbcscb)+32),8) /*                     */
   chrgnsz  = Storage(D2x(C2d(ascbcscb)+72),4) /*                     */
   chjbflgs = Storage(D2x(C2d(ascbcscb)+176),1)/*                     */
   chjbflgs = X2b(C2x(chjbflgs))            /*                        */
   If (Substr(chjbflgs,1,1) = '1') Then     /* if jobname= on jobcard */
    chmemnam = Storage(D2x(C2d(ascbcscb)+224),8) /*                   */
   Else                                     /*                        */
    chmemnam = Left('',8)                   /*                        */
   sr   = '  '                              /*                        */
   pos  = 'IN '                             /*                        */
   hi   = x07                               /*                        */
   If (Substr(oucbsfl,1,1) = '0') Then      /*                        */
    Do                                      /*                        */
     If (substr(ascbrctf,5,1) = '1') then   /*                        */
      Do                                    /*                        */
       pos  = 'LO '                         /*                        */
       hi   = x06                           /*                        */
       Select                               /* decode from IRASRCD map*/
        When (C2x(oucbsrc) = '1')  Then sr = 'TO'
        When (C2x(oucbsrc) = '2')  Then sr = 'TI'
        When (C2x(oucbsrc) = '3')  Then sr = 'LW'
        When (C2x(oucbsrc) = '4')  Then sr = 'XS'
        When (C2x(oucbsrc) = '5')  Then sr = 'RS'
        When (C2x(oucbsrc) = '6')  Then sr = 'DW'
        When (C2x(oucbsrc) = '7')  Then sr = 'RQ'
        When (C2x(oucbsrc) = '8')  Then sr = 'NQ'
        When (C2x(oucbsrc) = '9')  Then sr = 'EX'
        When (C2x(oucbsrc) = 'A')  Then sr = 'US'
        When (C2x(oucbsrc) = 'B')  Then sr = 'TS'
        When (C2x(oucbsrc) = 'C')  Then sr = 'IC'
        When (C2x(oucbsrc) = 'D')  Then sr = 'IP'
        When (C2x(oucbsrc) = 'E')  Then sr = 'MR'
        When (C2x(oucbsrc) = 'F')  Then sr = 'AW'
        When (C2x(oucbsrc) = '10') Then sr = 'IW'
        When (C2x(oucbsrc) = '11') Then sr = 'OW'
        Otherwise sr = '??'                 /*                        */
       End                                  /*                        */
      End                                   /*                        */
     swap = 'Swappable'                     /*                        */
    End                                     /*                        */
   Else                                     /*                        */
    Do                                      /*                        */
     pos  = 'NS '                           /*                        */
     sr   = '  '                            /*                        */
     swap = 'non-Swappable'                 /*                        */
    End                                     /*                        */
   typ = 'STC'                              /*                        */
   If (Substr(chact,2,1) = '1') Then        /*                        */
    Do                                      /*                        */
     typ = 'TSU'                            /*                        */
     memname  = chmemnam                    /*                        */
     procname = chcls                       /*                        */
     stepname = chkey                       /*                        */
    End                                     /*                        */
   If (chmemnam = 'INIT') Then              /*                        */
    Do                                      /*                        */
     typ = 'JOB'                            /*                        */
     memname  = j_chmemnam                  /*                        */
     procname = chcls                       /*                        */
     stepname = j_chstep                    /*                        */
    End                                     /*                        */
   If (typ = 'STC') Then                    /*                        */
    Do                                      /*                        */
     memname  = chmemnam                    /*                        */
     If (C2d(ascbjbni) = 0) Then            /*                        */
      Do                                    /*                        */
       stepname = chkey                     /*                        */
       procname = chprocsn                  /*                        */
      End                                   /*                        */
     Else                                   /*                        */
      Do                                    /*                        */
       stepname = j_chstep                  /*                        */
       procname = chcls                     /*                        */
      End                                   /*                        */
    End                                     /*                        */
   asid = Right(loop,4,'0')                 /*                        */
   asidX = Right(D2x(loop),4,'0')           /*                        */
   If (loop = 1) Then                       /*                        */
    Do                                      /*                        */
     procname = Left('',8)                  /*                        */
     stepname = Left('',8)                  /*                        */
    End                                     /*                        */
   /*
   Say jobname j_chprocsn j_chmemnam j_chstep chcls chmemnam chkey chprocsn
   */
   texl = hi||asid||' '||asidX||' '||jobname||' '||owner
   texl = texl||' '||memname||' '||procname||' '||stepname
   texl = texl||' '||dp||' '||pos||' '||sr||' '||typ
   texl = texl||' '||real||' '||pgn
   texl = texl||' '
   If (jobname /= 'INIT') Then              /* skip unused initiators */
    Do                                      /*                        */
     ascb_cnt = ascb_cnt + 1                /* increment count        */
     text.ascb_cnt = texl                   /*                        */
    End                                     /*                        */
  End                                       /*                        */
 offst = offst + 4                          /*                        */
End                                         /*                        */
Return                                      /*                        */
/**********************************************************************/
DEFINE_HEX:                                 /* Create display panel ##*/
X01 = '01'X                                 /* set hex '01' variable  */
X02 = '02'X                                 /* set hex '02' variable  */
X03 = '03'X                                 /* set hex '03' variable  */
X05 = '05'X                                 /* set hex '05' variable  */
X06 = '06'X                                 /* set hex '06' variable  */
X07 = '07'X                                 /* set hex '07' variable  */
X09 = '09'X                                 /* set hex '09' variable  */
X0A = '0A'X                                 /* set hex '0A' variable  */
X0B = '0B'X                                 /* set hex '0B' variable  */
X16 = '16'X                                 /* set hex '16' variable  */
X19 = '19'X                                 /* set hex '19' variable  */
X22 = '22'X                                 /* set hex '22' variable  */
X08 = '08'X                                 /* set hex '08' variable  */
X26 = '26'X                                 /* set hex '26' variable  */
X27 = '27'X                                 /* set hex '27' variable  */
Return
/**********************************************************************/
DEFINE_PANEL:                               /* Create display panel ##*/
"NewStack"                                  /* Create new stack       */
member = 'DAINFO'                           /* set panel name         */
Queue ")PANEL KEYLIST(ISRSNAB,ISR)"
Queue ")ATTR DEFAULT("X01||X02||X03") FORMAT(MIX)"
Queue " 05 TYPE(PT)"
Queue " 06 TYPE(ABSL)"
Queue " 07 TYPE(SAC)"
Queue " 08 TYPE(CH)"
Queue " 09 TYPE(FP)"
Queue " 0A TYPE(NT)"
Queue " 0B TYPE(ET)"
Queue " 16 TYPE(VOI) PADC(USER)"
Queue " 19 TYPE(DT)"
Queue " 22 TYPE(WASL) SKIP(ON)"
Queue " 26 TYPE(NEF) CAPS(ON) PADC(USER)"
Queue " 27 AREA(SCRL) EXTEND(ON)"
Queue ")BODY  CMD(ZCMD)"
Queue X0A||Centre(X05||"Display Active"||X0A,78)||X0A
comd = X09||"Command ===>"||X26||Left("ZCMD",50)||X0A
comd = comd||"Scroll ==>"||X26||"Z    "X0A
Queue comd
head = X06" ASID ASDX JOBNAME  OWNER    MEMBER   PROCNAME STEPNAME"
head = head||" DP POS SR TYP REAL PGN"
Queue head
Queue X27||Left("SAREA39",78)||X27
Queue X27||Left("",78)||X27
Queue ")AREA SAREA39"
Do loop = 1 to ascb_cnt
 Queue " "text.loop
End
Queue X22||X22
Queue ")INIT"
Queue " .ZVARS = '(ZSCROLLA)'"
Queue " &ZCMD = ''"
Queue " &ZSCROLLA = 'CSR'"
Queue ")PROC"
Queue ")END"
Return                                      /*                        */
/**********************************************************************/
CREATE_MEMBER:                              /* Create Member in PDS ##*/
Do loop = 1 To 50                           /* loop thru up to 50     */
 fil = 'DYNAM'||loop                        /*  build filename        */
 x = Listdsi(fil FILE)                      /*  test filename         */
 If (sysreason > 0) Then                    /*  if not present        */
  Leave                                     /*   use it !             */
End                                         /* end loop               */
Address TSO                                 /* set address            */
"Alloc Fi("fil") ",                         /* Allocate dynamic       */
      "Lrecl(80) Blksize(0) RecFm(F B) ",   /*  dataset to selected   */
      "Cylinders Space(1,1) ",              /*   filename             */
      "Unit(SYSALLDA) Dir(20) New Reu"      /*                        */
X = Listdsi(fil FILE)                       /* get the file details   */
stack = Queued()                            /*   get stack size       */
If (stack > 0) Then                         /*   if data on stack     */
 Do                                         /*                        */
  "Alloc Fi(MEMOUT) Shr Reu ",              /*    create member       */
        "Da('"sysdsname"("member")')"       /*                        */
  "ExecIO "stack" DiskW MEMOUT (Finis)"     /*    write stack > member*/
  "Free Fi(MEMOUT)"                         /*    free member         */
 End                                        /*                        */
member = Word(line,2)                       /*   get next member name */
"DelStack"                                  /* Clear stack            */
Return                                      /*                        */
