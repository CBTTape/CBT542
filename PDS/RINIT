/* REXX - RINIT : SDSF INIT 'replacement' code                        */
/**********************************************************************/
/* Written - A.J.Gray : 02/11/1995                                    */
/* Updated : A.J.Gray - 19/04/2002 - Changed to be a standalone util  */
/* Updated : A.J.Gray - 09/08/2002 - tweak before adding to CBT       */
/* Updated : A.J.Gray - 14/11/2002 - Changed SYSDA to SYSALLDA        */
/**********************************************************************/
/* This function displays a number of fields that you would normally  */
/* see using the SDSF INIT command. It doesn't show all of them and   */
/* it doesn't do anything else than display them.                     */
/* See also RDA                                                       */
/**********************************************************************/
/* Most people won't need this at all !                               */
/* However I have had brief periods when this was useful, so I thought*/
/* I'd add it anyway as you never know ;-)#                           */
/**********************************************************************/
/* display information                                                */
/**********************************************************************/
Call DEFINE_HEX                             /* define hex variables   */
prc = 0                                     /* initialise panel return*/
Do While prc = 0                            /* redisplay loop         */
 Call GET_INFO_INIT                         /* Get the DA information */
 Call DEFINE_PANEL                          /* define the panel       */
 Call CREATE_MEMBER                         /* create the panel member*/
 Address ISPEXEC "LibDef ISPPLIB Library Id("fil") Stack"
 Address ISPEXEC "Display Panel(INITINFO)"  /* display the panel      */
 prc = rc                                   /* get panel return       */
 Address ISPEXEC "LibDef ISPPLIB"           /* clear the temp alloc   */
 Address TSO     "Free Fi("fil")"           /* free the temp dsn      */
End                                         /*                        */
Exit 0                                      /* exit the exec          */
/**********************************************************************/
GET_INFO_INIT:                              /*                      ##*/
numeric digits 20
init_cnt = 0                                /* Get address of cvt     */
cvt      = Storage(10,4)                    /* Get address of cvt     */
cvtpfx   = Storage(D2x(C2d(cvt)-40),16)     /* Get the PREFIX         */
mvsver   = Substr(cvtpfx,1,7)               /* Get the MVS version    */
cvtsmca  = Storage(D2x(C2d(cvt)+196),4)     /* Get cvtsmca            */
cvtjesct = Storage(D2x(C2d(cvt)+296),4)     /* Get cvtjesct           */
jesssct  = Storage(D2x(C2d(cvtjesct)+24),4) /* Get jesssct (SScvt)    */
ssctscta = jesssct                          /*                        */
Do While C2d(ssctscta) /= 0                 /*                        */
 ssctsnam = Storage(D2x(C2d(ssctscta)+8),4) /*                        */
 ssctssvt = Storage(D2x(C2d(ssctscta)+16),4)/*                        */
 ssctsus2 = Storage(D2x(C2d(jesssct)+28),4) /* point to $HCCT         */
 cctssnm  = Storage(D2x(C2d(ssctsus2)+696),4)/* jes name of subsystem */
 If (ssctsnam = cctssnm) Then
  Do
   ssvtfnum = Storage(D2x(C2d(ssctssvt)+2),2)
   Select
    When (mvsver = 'SP4.3.0') Then
     cctpit   = Storage(D2x(C2d(ssctsus2)+1176),4) /* point to $PIT   */
    When (mvsver = 'SP6.0.8') Then
     cctpit   = Storage(D2x(C2d(ssctsus2)+1280),4) /* point to $PIT   */
    Otherwise
     cctpit   = Storage(D2x(C2d(ssctsus2)+1184),4) /* point to $PIT   */
   End
   Do While C2d(cctpit) /= 0
    pitpatid = Storage(D2x(C2d(cctpit)+20),4)
    pitclass = Storage(D2x(C2d(cctpit)+24),36)
    pitclass = Left(pitclass,8)
    pitflags = Storage(D2x(C2d(cctpit)+16),1)
    pitflags = X2b(C2x(pitflags))
    pitdupj  = Substr(pitflags,1,1)
    pitsmver = Substr(pitflags,2,1)
    pitsiver = Substr(pitflags,3,1)
    pitstat  = Storage(D2x(C2d(cctpit)+17),1)
    pitstat  = X2b(C2x(pitstat))
    Do loop = 1 to 8
     ps.loop = Substr(pitstat,loop,1)
    End
    pitsjb   = Storage(D2x(C2d(cctpit)+4),4)
    sjbasid  = Storage(D2x(C2d(pitsjb)+226),2)
    sjbasid  = c2x(sjbasid)
    sjbasidd = Right(X2d(sjbasid),4)
    hilite = x06
    Select
     When (ps.1 = '1') & (ps.2 = '1') & (ps.4 = '0') Then
      Do
       status = Left('Drained ',8)
       type = 'BLANK'
       sjbasid = Left(' ',4)
       sjbasidd = Left(' ',4)
      End
     When (ps.1 = '0') & (ps.2 = '1') & (ps.4 = '0') Then
      Do
       status = Left('Drained ',8)
       type = 'BLANK'
       sjbasid = Left(' ',4)
       sjbasidd = Left(' ',4)
      End
     When (ps.1 = '1') & (ps.2 = '1') & (ps.4 = '1') Then
      Do
       status = Left('Draining',8)
       hilite = '|'
       type = 'NORM'
      End
     When (ps.5 = '1') & (ps.6 = '1') & (ps.4 = '0') Then
      Do
       status = Left('Halted',8)
       hilite = '|'
       type = 'NORM'
      End
     When (ps.6 = '1') & (ps.7 = '1') & (ps.8 = '1') Then
      Do
       status = Left('Halted',8)
       hilite = '|'
       type = 'NORM'
      End
     When (ps.5 = '1') & (ps.6 = '1') & (ps.4 = '1') Then
      Do
       status = Left('Halting ',8)
       hilite = '|'
       type = 'NORM'
      End
     When (ps.1 = '0') & (ps.2 = '0') & (ps.5 = '0') & (ps.6 = '0') &,
          (ps.4 = '0') & (pitsmver = '0') Then
      Do
       status = Left('Inactive',8)
       type = 'BLANK'
      End
     When (ps.1 = '0') & (ps.2 = '0') & (ps.5 = '0') & (ps.6 = '0') &,
          (ps.4 = '0') & (pitsmver = '1') Then
      Do
       status = Left('Starting',8)
       hilite = x07
       type = 'NORM'
      End
     When (ps.1 = '0') & (ps.2 = '0') & (ps.5 = '0') & (ps.6 = '0') &,
          (ps.4 = '1') Then
      Do
       status = Left('Active',8)
       hilite = x07
       type = 'NORM'
      End
     Otherwise
      Do
       status = Left('Unknown',8)
       type = 'NORM'
      End
    End
    If (type = 'BLANK') Then
     Do
      sjbjobnm = Left('',8)
      sjbjobid = Left('',8)
      sjbusrid = Left('',8)
      sjbjclas = ' '
     End
    Else
     Do
      /*
      sjbjclas = Storage(D2x(C2d(pitsjb)+204),1)
      sjbjobid = Storage(D2x(C2d(pitsjb)+216),8)
      sjbjobnm = Storage(D2x(C2d(pitsjb)+224),8)
      sjbusrid = Storage(D2x(C2d(pitsjb)+232),8)
      */
      sjbjclas = Storage(D2x(C2d(pitsjb)+224),1)
      sjbjobid = Storage(D2x(C2d(pitsjb)+236),8)
      sjbjobnm = Storage(D2x(C2d(pitsjb)+244),8)
      sjbusrid = Storage(D2x(C2d(pitsjb)+252),8)
     End
    texl = pitpatid||' '||status||' '||pitclass' '
    texl = texl||sjbjobnm||' '||sjbjobid||' '||sjbusrid||' '||sjbjclas
    texl = texl||' '||sjbasidd||' '||sjbasid
    texl = Left(hilite||texl,79)
    text = text||texl
    init_cnt = init_cnt + 1                 /* increment count        */
    text.init_cnt = texl                    /*                        */
    cctpit   = Storage(D2x(C2d(cctpit)),4)
   End
  End
 ssctscta = Storage(D2x(C2d(ssctscta)+4),4) /*                        */
End                                         /*                        */
Return
/**********************************************************************/
DEFINE_HEX:                                 /* Create display panel ##*/
X01 = '01'X                                 /* set hex '01' variable  */
X02 = '02'X                                 /* set hex '02' variable  */
X03 = '03'X                                 /* set hex '03' variable  */
X05 = '05'X                                 /* set hex '05' variable  */
X06 = '06'X                                 /* set hex '06' variable  */
X07 = '07'X                                 /* set hex '07' variable  */
X09 = '09'X                                 /* set hex '09' variable  */
X0A = '0A'X                                 /* set hex '0A' variable  */
X0B = '0B'X                                 /* set hex '0B' variable  */
X16 = '16'X                                 /* set hex '16' variable  */
X19 = '19'X                                 /* set hex '19' variable  */
X22 = '22'X                                 /* set hex '22' variable  */
X08 = '08'X                                 /* set hex '08' variable  */
X26 = '26'X                                 /* set hex '26' variable  */
X27 = '27'X                                 /* set hex '27' variable  */
Return
/**********************************************************************/
DEFINE_PANEL:                               /* Create display panel ##*/
"NewStack"                                  /* Create new stack       */
member = 'INITINFO'                         /* set panel name         */
Queue ")PANEL KEYLIST(ISRSNAB,ISR)"
Queue ")ATTR DEFAULT("X01||X02||X03") FORMAT(MIX)"
Queue " 05 TYPE(PT)"
Queue " 06 TYPE(ABSL)"
Queue " 07 TYPE(SAC)"
Queue " 08 TYPE(CH)"
Queue " 09 TYPE(FP)"
Queue " 0A TYPE(NT)"
Queue " 0B TYPE(ET)"
Queue " 16 TYPE(VOI) PADC(USER)"
Queue " 19 TYPE(DT)"
Queue " 22 TYPE(WASL) SKIP(ON)"
Queue " 26 TYPE(NEF) CAPS(ON) PADC(USER)"
Queue " 27 AREA(SCRL) EXTEND(ON)"
Queue ")BODY  CMD(ZCMD)"
Queue X0A||Centre(X05||"Initiators"||X0A,78)||X0A
comd = X09||"Command ===>"||X26||Left("ZCMD",50)||X0A
comd = comd||"Scroll ==>"||X26||"Z    "X0A
Queue comd
head = X06" ID   STATUS   CLASSES  JOBNAME  JOBID    USER     C"
head = head" ASID ASIDX"
Queue head
Queue X27||Left("SAREA39",78)||X27
Queue X27||Left("",78)||X27
Queue ")AREA SAREA39"
Do loop = 1 to init_cnt
 Queue " "text.loop
End
Queue X22||X22
Queue ")INIT"
Queue " .ZVARS = '(ZSCROLLA)'"
Queue " &ZCMD = ' '"
Queue " &ZSCROLLA = 'CSR '"
Queue ")PROC"
Queue ")END"
Return                                      /*                        */
/**********************************************************************/
CREATE_MEMBER:                              /* Create Member in PDS ##*/
Do loop = 1 To 50                           /* loop thru up to 50     */
 fil = 'DYNAM'||loop                        /*  build filename        */
 x = Listdsi(fil FILE)                      /*  test filename         */
 If (sysreason > 0) Then                    /*  if not present        */
  Leave                                     /*   use it !             */
End                                         /* end loop               */
Address TSO                                 /* set address            */
"Alloc Fi("fil") ",                         /* Allocate dyamic        */
      "Lrecl(80) Blksize(0) RecFm(F B) ",   /*  dataset to selected   */
      "Cylinders Space(1,1) ",              /*   filename             */
      "Unit(SYSALLDA) Dir(20) New Reu"      /*                        */
X = Listdsi(fil FILE)                       /* get the file details   */
stack = Queued()                            /*   get stack size       */
If (stack > 0) Then                         /*   if data on stack     */
 Do                                         /*                        */
  "Alloc Fi(MEMOUT) Shr Reu ",              /*    create member       */
        "Da('"sysdsname"("member")')"       /*                        */
  "ExecIO "stack" DiskW MEMOUT (Finis)"     /*    write stack > member*/
  "Free Fi(MEMOUT)"                         /*    free member         */
 End                                        /*                        */
member = Word(line,2)                       /*   get next member name */
"DelStack"                                  /* Clear stack            */
Return                                      /*                        */
