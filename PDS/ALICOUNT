/* REXX - ALICOUNT : Count datasets for each alias in the system      */
/**********************************************************************/
/* ALICOUNT : Uses Catalog Search Interface (CSI)                     */
/**********************************************************************/
/* Author : Alastair Gray - a_j_gray@hotmail.com                      */
/*                 (or the e-mail I use to post on TSO-REXX/IBM-MAIN) */
/*                                                                    */
/* This was an extension of previous work that was initially derived  */
/* from the code found in 'SYS1.SAMPLIB(IGGCSIRX)'                    */
/*                                                                    */
/**********************************************************************/
/* Changes :                                                          */
/* 1.0.0   - 10/01/2002 - Alastair Gray - Original version            */
/* 1.1.0   - 11/01/2002 - Alastair Gray - Rewrite using CLICODE base  */
/* 1.1.1   - 14/01/2002 - Alastair Gray - Add TOT_INIT                */
/* 1.1.2   - 22/01/2002 - Alastair Gray - In line with CSICODE        */
/* 1.1.3   - 29/04/2002 - Alastair Gray - Added '?' option            */
/* 1.1.4   - 31/05/2002 - Alastair Gray - Correction to processing    */
/* 1.1.5   - 08/08/2002 - Alastair Gray - Realigned with CSICODE      */
/* 1.1.6   - 20/09/2002 - Alastair Gray - Realigned with CSICODE      */
/* 1.1.7   - 14/11/2002 - Alastair Gray - Changed SYSDA to SYSALLDA   */
/* 1.1.8   - 21/11/2002 - Alastair Gray - Changed to BPXWDYN          */
/* 1.2.0   - 21/11/2002 - Alastair Gray - replaced LISTDSI function   */
/* 1.2.1   - 22/11/2002 - Alastair Gray - allowed JES seq output      */
/* 1.2.2   - 30/01/2003 - Alastair Gray - fixed PDS output bug        */
/* 1.2.3   - 03/03/2003 - Alastair Gray - allow for no-OMVS available */
/* 1.2.4   - 04/03/2003 - Alastair Gray - switched OMVS/TSO order     */
/**********************************************************************/
/* Notes :                                                            */
/*                                                                    */
/* 1. This processes the master catalog to get a list of aliases and  */
/*    then processes each ALIAS/UCAT to get a dataset count.          */
/*                                                                    */
/* 2. The output is written to members of a PDS allocated to REPORT.  */
/*    or in batch JES sequential output is allowed.                   */
/*                                                                    */
/**********************************************************************/
Trace O                              /* Trace Off                     */
If (Address() = 'TSO') Then          /* test if under TSO             */
 Do                                  /*                               */
  x = Msg('Off')                     /* Disable messages              */
  x = Prompt('Off')                  /* Disable prompts               */
 End                                 /*                               */
/**********************************************************************/
/* extract / check and set environment variables                      */
/**********************************************************************/
cvt      = Storage(10,4)             /* get the CVT address           */
cvtpfx   = Storage(D2x(C2d(cvt)-40),16) /* get the prefix             */
mvsfmid  = Substr(cvtpfx,9,7)        /* get the mvs fmid              */
If (Substr(mvsfmid,4,4) >= 6603) Then/* test for OS/390 R3 and greater*/
 omvs_flag = 'OMVS'                  /* set OMVS flag                 */
If (Mvsvar("SYSSMS") = 'ACTIVE') Then/* test for SMS environment      */
 sms_flag = 'SMS'                    /* set SMS flag                  */
If (Address() = 'TSO') Then          /* test for tso environment      */
 tso_flag = 'TSO'                    /* set TSO flag                  */
If (tso_flag = 'TSO') Then           /* if TSO environment            */
 Do                                  /*                               */
  If (Sysvar("SYSENV") = 'FORE') Then/* test for foreground           */
   env_flag = 'FORE'                 /* set ENV flag                  */
  If (Sysvar("SYSISPF") = 'ACTIVE') Then/* test for ISPF              */
   ispf_flag = 'ISPF'                /* set ISPF flag                 */
 End                                 /*                               */
If (omvs_flag /= 'OMVS') &,          /* if no OMVS                    */
   (tso_flag /= 'TSO') Then          /* and no TSO                    */
 Do                                  /*                               */
  Say '**(Error-1)* No TSO environment and no OMVS environment.'
  Say '**(Error-2)* RCNVTCAT cannot allocate files, so terminating.'
  Signal FINISH                      /* leave the exec                */
 End                                 /*                               */
/**********************************************************************/
Arg test                             /* allow for '?' option          */
If (test = '?') Then                 /*                               */
 Do                                  /*                               */
  Say "ALICOUNT has no other parms"  /*                               */
  Say " To use simply specify 'ALICOUNT' it will identify and use the "
  Say " master catalog."             /*                               */
  Signal FINISH                      /*                               */
 End                                 /*                               */
/**********************************************************************/
/* Initialise the relevant CSI variables                              */
/**********************************************************************/
cat = ' '                            /* Set catalog name              */
flt = '**'                           /* Set the filter                */
typ = ' '                            /* Set entry types required      */
ct1 = ' '                            /* Set for 1 catalog only        */
/**********************************************************************/
/* Setup for output of reports                                        */
/**********************************************************************/
Call DSN_HANDLING
/**********************************************************************/
/* Initialise the various totals variables                            */
/**********************************************************************/
Call TOT_INIT                        /* Initialise totals             */
/**********************************************************************/
/* CSI Processing section                                             */
/**********************************************************************/
x = CSI(' ','**','X',' ')            /* initial CSI call              */
/**********************************************************************/
nvsam_cnt = 0                        /* initialise non-vsam count     */
ucat_cnt  = 0                        /* initialise usercat count      */
/**********************************************************************/
l_cnt = l_cnt + 2                    /* increment for loop            */
head1 = l_cnt - 1                    /* calculate header line 1       */
head2 = l_cnt                        /* calculate headre line 2       */
Do zzzz = 1 to alias_tot             /* loop through alias list       */
 ind_tot = 0                         /*  initialise counter           */
 If (altyp.zzzz = 'A') Then          /*  if alternate is NONVSAM      */
  Do                                 /*                               */
   nvsam_cnt = nvsam_cnt + 1         /*   increment non-VSAM counter  */
   l_cnt = l_cnt + 1                 /*   increment report line       */
   l.l_cnt = Left(1,6)' 'alias.zzzz' for 'Strip(alcat.zzzz,T)
  End                                /*                               */
End                                  /*                               */
l.head1 = 'Number of Non-VSAM aliases found = 'nvsam_cnt
l.head2 = Left('-',Length(l.head1),'-')
/**********************************************************************/
l_cnt = l_cnt + 1                    /* add a blank line to report    */
l.l_cnt = ' '                        /*                               */
/**********************************************************************/
l_cnt = l_cnt + 2                    /* increment for next loop       */
head1 = l_cnt - 1                    /* calculate header line 1       */
head2 = l_cnt                        /* calculate headre line 2       */
Do zzzz = 1 to alias_tot             /* loop through alias list       */
 ind_tot = 0                         /*  initialise counter           */
 If (altyp.zzzz = 'U') Then          /*  if alternate is UCAT         */
  Do                                 /*                               */
   ucat_cnt = ucat_cnt + 1           /*   increment UCAT counter      */
   l_cnt = l_cnt + 1                 /*   increment report line       */
   x = CSI(Strip(alcat.zzzz,T),Strip(alias.zzzz)'.**','ABCGHR','Y')
   l.l_cnt = Left(ind_tot,6)' 'alias.zzzz' in  'Strip(alcat.zzzz,T)
  End                                /*                               */
End                                  /*                               */
l.head1 = 'Number of UCAT aliases found = 'ucat_cnt
l.head2 = Left('-',Length(l.head1),'-')
/**********************************************************************/
/* Produce the ALIAS Report                                           */
/**********************************************************************/
member = 'ALIASCNT'                  /* processing ALIASCNT report    */
Call WRITE_MEMBER                    /* write-out member              */
/**********************************************************************/
/* Display output if foreground ISPF                                  */
/**********************************************************************/
If (env_flag = 'FORE') &,            /*                               */
   (ispf_flag = 'ISPF') Then         /*                               */
 Do                                  /*                               */
  x = Listdd(REPORT)                 /*                               */
  Address ISPEXEC "EDIT DATASET('"sysdsname"') VOLUME("sysvolume")"
  Address TSO "Free Fi(REPORT)"      /* free the report file          */
 End                                 /*                               */
/**********************************************************************/
/* Finish the REXX                                                    */
/**********************************************************************/
FINISH:                              /*                               */
Exit 0                               /* Exit the code                 */
/**********************************************************************/
/**********************************************************************/

/**********************************************************************/
/**********************************************************************/
CSI:                                 /* CSI procedure start         ##*/
Arg cat,flt,typ,ct1                  /* get passed arguments          */
/**********************************************************************/
/* Initialise the parameter list                                      */
/**********************************************************************/
modrsnrc = Substr(' ',1,4)           /* clear module/return/reason    */
csifiltk = Substr(flt,1,44)          /* move filter key into list     */
csicatnm = Substr(cat,1,44)          /* clear catalog name            */
csiresnm = Substr(' ',1,44)          /* clear resume name             */
csidtyps = Substr(typ,1,16)          /* clear entry types             */
csicldi  = Substr('Y',1,1)           /* indicate data and index       */
csiresum = Substr(' ',1,1)           /* clear resume flag             */
csis1cat = Substr(ct1,1,1)           /* indicate search > 1 catalogs  */
csiresrv = Substr(' ',1,1)           /* clear reserve character       */
/**********************************************************************/
/* Initialise requested fields                                        */
/**********************************************************************/
csinumen = '0004'X                   /* init number of fields         */
csifld01 = Left('ENTYPE  ',8)        /* type of entry                 */
csifld02 = Left('ENTNAME ',8)        /* name of entry                 */
csifld03 = Left('TYPE    ',8)        /* type of associated entry      */
csifld04 = Left('NAME    ',8)        /* name of associated entry      */
/**********************************************************************/
/* Build the selection criteria fields part of parameter list         */
/**********************************************************************/
csiopts  = csicldi ||csiresum||csis1cat||csiresrv
csifield = csifiltk||csicatnm||csiresnm||csidtyps||csiopts ||csinumen
csifield = csifield||csifld01||csifld02||csifld03||csifld04
/**********************************************************************/
/* Initialise and build work are output part of parameter list        */
/**********************************************************************/
csiusrln = 524288                    /* CSIUSRLN work area length     */
                                     /* range from 1024 to 1048575    */
dwork = Right(D2c(csiusrln),4,'00'X)||Copies('00'X,csiusrln-4)
/**********************************************************************/
/* Initialise work variables                                          */
/**********************************************************************/
csiresum = 'Y'
/**********************************************************************/
/* Set up loop for resume (if a resume is necessary)                  */
/**********************************************************************/
Do While csiresum = 'Y'
/**********************************************************************/
/* Issue link to CSI - Catalog Search Interface                       */
/**********************************************************************/
 Address LinkPGM 'IGGCSI00 modrsnrc csifield dwork'
 r15 = rc                            /* get returned code             */
 mod = Substr(modrsnrc,1,2)          /* get module code               */
 res = C2d(Substr(modrsnrc,3,1))     /* get return code               */
 ret = C2d(Substr(modrsnrc,4,1))     /* get reason code               */
 If (r15 > 0) Then                   /* when error occured            */
  Do
   Say '**(Error-1)* CSI processing.'
   Say '**(Error-2)* R15='r15 'Module='mod' Return='ret' Reason='res
  End
/**********************************************************************/
 csiresum = Substr(csifield,150,1)   /* Get resume flag for next loop */
 csiresnm = Substr(csifield,89,44)   /* Get resume name for next loop */
 csiusrln = C2D(Substr(dwork,1,4))   /* Get length of work area       */
 csireqln = C2D(Substr(dwork,5,4))   /* Get length of work area reqd  */
 csiusdln = C2D(Substr(dwork,9,4))   /* Get length of work area used  */
 If (csireqln > csiusrln) Then       /*                               */
  Do                                 /*                               */
   Say '**(Error-1)* Work Area defined  = 'csiusrln
   Say '**(Error-2)* Work Area used     = 'csiusdln
   Say '**(Error-3)* Work Area required = 'csireqln
   Say '**(Error-4)* Increase the work area defined - CSIUSRLN.'
  End                                /*                               */
 If (csiusdln < 65) Then Leave       /* No entries returned           */
 off = 15                            /* Starting position             */
/**********************************************************************/
/* Process data returned in work area                                 */
/**********************************************************************/
 Do While off < csiusdln             /* do until all data is processed*/
  csi_flag = Substr(dwork,off,1)     /* get the flag byte             */
  csi_type = Substr(dwork,off+1,1)   /* get the entry type            */
  csi_name = Substr(dwork,off+2,44)  /* get the entry name            */
  csi_retn = Substr(dwork,off+46,4)  /* get the return code           */
  mod = Substr(csi_retn,1,2)         /* get CSI module                */
  res = C2d(Substr(csi_retn,3,1))    /* get reason code               */
  ret = C2d(Substr(csi_retn,4,1))    /* get return code               */
  If (csi_type = '0') Then           /* Catalog entry                 */
   Do                                /*                               */
    If (ret > 0) Then                /* test catalog return code      */
     Do
      Say '**(Error-1)* Catalog processing - 'Strip(csi_name,B)'.'
      Say '**(Error-2)* Module='mod' Return='ret' Reason='res
     End
    csicname = csi_name              /* set the catalog name          */
    plus = 50                        /* length for catalog entry      */
   End                               /*                               */
  Else                               /*                               */
   Do                                /*                               */
    csiename = csi_name              /* use the entry name            */
    csietype = csi_type              /* use the entry name            */
    csieflag = X2b(C2x(csi_flag))    /* use the entry flag            */
    csienter = Substr(csieflag,2,1)  /* get the entry error flag      */
    csitotln = C2d(Substr(csi_retn,1,2))/* get entry total length     */
    If (csienter = '1') Then         /* entry error                   */
     Do
      Say '**(Error-1)* Entry processing - 'Strip(csi_name,B)'.'
      Say '**(Error-2)* Module='mod' Return='ret' Reason='res
      plus = 50                      /* length for error entry        */
     End
    Else                             /*                               */
     Do                              /*                               */
      Call ENTRY                     /* Execute entry processing      */
      plus = 46 + csitotln           /* length for normal entry       */
     End                             /*                               */
   End                               /*                               */
/**********************************************************************/
/*                                                                    */
/**********************************************************************/
   Call DATA_HANDLING                /*                               */
/**********************************************************************/
/* increment for next entry                                           */
/**********************************************************************/
  off = off + plus                   /* build new offset              */
 End                                 /*                               */
End                                  /*                               */
/**********************************************************************/
/* Complete CSI Procedure                                             */
/**********************************************************************/
Return 0                             /*                               */
/**********************************************************************/

/**********************************************************************/
/* Process entry fields to extract data                               */
/**********************************************************************/
ENTRY:                               /* Start entry processing      ##*/
/**********************************************************************/
/* entry field size and location extraction                           */
/**********************************************************************/
e_off = off + 46                     /* get offset to entries         */
o_fld.1 = e_off+4+(C2d(csinumen)*2)  /* get first field offset        */
l_fld.1 = C2d(Substr(dwork,e_off+4,2)) /* get first field length      */
e_pos = 6                            /* set offset of second field    */
Do flds = 2 to C2d(csinumen)         /* loop through other fields     */
 prv = flds - 1                      /* set 'previous' value          */
 o_fld.flds = o_fld.prv + l_fld.prv  /* get next offset               */
 l_fld.flds = C2d(Substr(dwork,e_off+e_pos,2)) /* get next length     */
 e_pos = e_pos + 2                   /*                               */
End                                  /*                               */
/**********************************************************************/
/* entry field extraction                                             */
/**********************************************************************/
entype   = Substr(dwork,o_fld.1,l_fld.1)   /* Type of entry           */
entname  = Substr(dwork,o_fld.2,l_fld.2)   /* Name of entry           */
type     = Substr(dwork,o_fld.3,l_fld.3)   /* Type of assc entry      */
name     = Substr(dwork,o_fld.4,l_fld.4)   /* Name of assc entry      */
/**********************************************************************/
/* entry re-processing section                                        */
/**********************************************************************/
If (Index(csifield,'ENTYPE') > 0) Then   /*                           */
 Call FLD_ENTYPE                         /*                           */
If (Index(csifield,'ENTNAME') > 0) Then  /*                           */
 Call FLD_ENTNAME                        /*                           */
/**********************************************************************/
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTYPE   - Process ENTYPE   field                              */
/**********************************************************************/
FLD_ENTYPE:                          /* ENTYPE   field processing   ##*/
Select                               /* decode type flag              */
 When (entype = 'C') Then entype = 'CLUSTER'  /*                      */
 When (entype = 'D') Then entype = 'DATA'     /*                      */
 When (entype = 'I') Then entype = 'INDEX'    /*                      */
 When (entype = 'A') Then entype = 'NONVSAM'  /*                      */
 When (entype = 'H') Then entype = 'GDS'      /*                      */
 When (entype = 'B') Then entype = 'GDG'      /*                      */
 When (entype = 'R') Then entype = 'PATH'     /*                      */
 When (entype = 'G') Then entype = 'AIX'      /*                      */
 When (entype = 'X') Then entype = 'ALIAS'    /*                      */
 When (entype = 'U') Then entype = 'UCAT'     /*                      */
 Otherwise                           /*                               */
  Say '**(Error-1)* Entry type processing for 'Strip(entname,T)
  Say '**(Error-2)* Entry type ='entype
  entype = ' '                       /* unknown type                  */
End                                  /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* FLD_ENTNAME  - Process ENTNAME  field                              */
/**********************************************************************/
FLD_ENTNAME:                         /* ENTNAME  field processing   ##*/
If (Substr(entname,1,2) = '0000'x) Then /* If blank dsname            */
 entname = Left(C2x(entname),44)     /* Return hex value              */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* WRITE_MEMBER - Write out the generated lines to a PDS member       */
/**********************************************************************/
WRITE_MEMBER:                        /* Write out the report member ##*/
If (l_cnt = 0) Then                  /* if no output                  */
 Do                                  /*                               */
  l_cnt = l_cnt + 1                  /* write a no output line        */
  l.l_cnt = ' /*' no data produced '*/' /*                            */
 End                                 /*                               */
If (member /= 'REPORT') Then         /* if not a REPORT member        */
 Do                                  /*                               */
  l_cnt = l_cnt + 1                  /*  add a line                   */
  l.l_cnt = ' /*'member'*/'          /*  add report name              */
 End                                 /*                               */
If (outflag /= 'JES') Then           /* if not jes queue              */
 Do                                  /*                               */
  If (tso_flag = 'TSO') Then         /*                               */
   Address TSO "Alloc Fi(MEMOT) Da('"dsn"("member")') Shr Reuse"
  Else                               /*                               */
   Do                                /*                               */
    bpxparm = "Alloc Fi(MEMOT) Da('"dsn"("member")') Shr Reuse"
    Call BPXWDYN(bpxparm)            /*                               */
   End                               /*                               */
  Address MVS "ExecIO "l_cnt" DiskW MEMOT (Finis Stem l.)"
  If (tso_flag = 'TSO') Then         /*                               */
   Address TSO "Free Fi(MEMOT)"      /*                               */
  Else                               /*                               */
   Do                                /*                               */
    bpxparm = "Free Fi(MEMOT)"       /*                               */
    Call BPXWDYN(bpxparm)            /*                               */
   End                               /*                               */
 End                                 /*                               */
Else                                 /* otherwise                     */
 Address MVS "ExecIO "l_cnt" DiskW REPORT (Finis Stem l.)"
l_cnt = 0                            /* re-init line count for next   */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* DSN_HANDLING - Carry out processing for output dataset             */
/**********************************************************************/
DSN_HANDLING:                        /* 'Handle' the data produced  ##*/
rc = Listdd(REPORT)                  /*                               */
If (rc = 16) Then                    /* REPORT not allocated          */
 If (env_flag /= 'FORE') Then        /*                               */
  Do                                 /*                               */
   Say '**(Error-1)* For execution in batch, please ensure that a PDS'
   Say '**(Error-2)* is pre-allocated to DD name REPORT.'
   Signal FINISH                     /*                               */
  End                                /*                               */
 Else                                /*                               */
  If (ispf_flag /= 'ISPF') Then      /*                               */
   Do                                /*                               */
    Say '**(Error-1)* For execution in foreground TSO, please ensure'
    Say '**(Error-2)* that a PDS is pre-allocated to DD name REPORT.'
    Signal FINISH                    /*                               */
   End                               /*                               */
  Else                               /*                               */
   Do                                /*                               */
    If (tso_flag = 'TSO') Then       /*                               */
     Address TSO "Alloc Fi(REPORT) Lrecl(133) Unit(SYSALLDA)",
                 "Space(2,2) Dir(10) Cyl ",
                 "Blksize(1330) Recfm(F,B) New Reuse"
    Else                             /*                               */
     Do                              /*                               */
      bpxparm = "Alloc Fi(REPORT) Lrecl(133) Unit(SYSALLDA)",
                "Space(2,2) Dir(10) Cyl ",
                "Blksize(1330) Recfm(F,B) New Reuse"
      Call BPXWDYN(bpxparm)
     End                             /*                               */
    x = Listdd(REPORT)               /*                               */
    dsn = sysdsname                  /*                               */
   End                               /*                               */
Else                                 /*                               */
 dsn = sysdsname                     /* get dataset name from DD      */
If (sysvolume = '*JES**') Then       /*                               */
 Do                                  /*                               */
  Say '**(Warning-1)* For execution in batch, it is recommended that'
  Say '**(Warning-2)* a PDS is pre-allocated to DD name REPORT.'
  Say '**(Warning-3)* Processing will continue with sequential output.'
  outflag = 'JES'                    /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* TOT_INIT - Initialise the various totals variables                 */
/**********************************************************************/
TOT_INIT:                            /* Initialise totals variables ##*/
l_cnt   = 0                          /* Initialise output line count  */
alias_tot = 0                        /* initialise alias counter      */
ind_tot   = 0                        /* initialise individual counter */
Return                               /*                               */
/**********************************************************************/

/**********************************************************************/
/* LISTDD   - Get the dataset and volume for a selected DD name       */
/**********************************************************************/
LISTDD:                                     /*                        */
Arg dd                                      /*                        */
Numeric Digits 20                           /*                        */
drc = 16                                    /*                        */
psatold  = Storage(D2x(540),4)              /* pointer to current tcb */
tcbtio   = Storage(D2x(C2d(psatold)+12),4)  /* pointer to tiot        */
offset   = 24                               /* establish tiot offset  */
Do Forever                                  /*                        */
 tioelngh = Storage(D2x(C2d(tcbtio)+offset+0),1) /* length of DD entry*/
 tioestta = Storage(D2x(C2d(tcbtio)+offset+1),1) /* status byte A     */
 tioelink = Storage(D2x(C2d(tcbtio)+offset+3),1) /* flag byte         */
 tioeddnm = Storage(D2x(C2d(tcbtio)+offset+4),8) /* DD name           */
 tioejfcb = Storage(D2x(C2d(tcbtio)+offset+12),3) /* SWA for JFCB     */
 tioefsrt = Storage(D2x(C2d(tcbtio)+offset+17),3) /* UCB address      */
 If (bitand(tioestta,'80'x) == '00'x) Then  /* check 'freed' status   */
  Do                                        /*                        */
   If (tioelngh == '00'x) Then Leave        /* no more allocations    */
   tioejfcb = SWAREQ(tioejfcb)              /* Call SWAREQ            */
   jfcbdsnm = Storage(D2x(C2d(tioejfcb)+0),44) /* get dataset name    */
   jfcbvols = Storage(D2x(C2d(tioejfcb)+118),30) /* get volume list   */
   tioelink = X2b(C2x(tioelink))            /* get bit pattern        */
   Select                                   /*                        */
    When (Substr(tioelink,3,1) = '1') Then  /* check for TERMINAL     */
     jfcbvols = "*TERM*"                    /*                        */
    When (Substr(tioelink,7,1) = '1') Then  /* check for subsys dsn   */
     jfcbvols = "*JES**"                    /*                        */
    Otherwise                               /*                        */
     Do                                     /*                        */
      ucbchan  = Storage(D2x(C2d(tioefsrt)+4),2) /* UCB channel (bin) */
      ucbname  = Storage(D2x(C2d(tioefsrt)+13),3) /* UCB name (EBCDIC)*/
      ucbvoli  = Storage(D2x(C2d(tioefsrt)+28),6) /* UCB volser       */
     End                                    /*                        */
   End                                      /*                        */
   If (tioeddnm = "") Then                  /* no ddname ?            */
    conc = conc + 1                         /*  assume concatenation  */
   else                                     /* otherwise              */
    conc = 0                                /*  assume first          */
   ucbname = ""                             /*                        */
   If (tioeddnm = "") Then                  /* no ddname ?            */
    Do                                      /*                        */
     dsns = dsns||' '||jfcbdsnm             /*  assume concatenation  */
     vols = vols||' '||Strip(jfcbvols,T)    /*  assume concatenation  */
    End                                     /*                        */
   else                                     /* otherwise              */
    If (flag = dd) Then                     /* if already set         */
     Do                                     /*                        */
      Signal DDDone                         /* exit procedure         */
     End                                    /* otherwise              */
   If (tioeddnm = dd) Then                  /* ddname match           */
    Do                                      /*                        */
     drc = 0                                /*                        */
     flag = dd                              /*  set flag              */
     dsns = jfcbdsnm                        /*  initialiase dsn list  */
     vols = Strip(jfcbvols,T)               /*  initialiase vol list  */
    End                                     /*                        */
  End                                       /*                        */
 offset = offset + C2d(tioelngh)            /*                        */
End                                         /*                        */
/**********************************************************************/
DDDone:                                     /*                        */
sysdsname = Strip(dsns,B)                   /* set LISTDSI values     */
sysvolume = Strip(vols,B)                   /* set LISTDSI values     */
Return drc                                  /*                        */
/**********************************************************************/
/* Common procedures                                                  */
/**********************************************************************/
SWAREQ:                                     /* SWAREQ Procedure     ::*/
If (Right(C2x(Arg(1)),1) \= 'F') Then       /* SWA=BELOW ?            */
 Return D2c(C2d(Arg(1))+16)                 /* yes, return sva+16     */
sva  = C2d(Arg(1))                          /* convert to decimal     */
tcb  = C2d(Storage(21C,4))                  /* TCB         PSATOLD    */
jscb = C2d(Storage(D2x(tcb+180),4))         /* JSCB        TCBJSCB    */
qmpl = C2d(Storage(D2x(jscb+244),4))        /* QMPL        JSCBQMPI   */
qmat = C2d(Storage(D2x(qmpl+24),4))         /* QMAT        QMADD      */
Do While sva > 65536                        /*                        */
 qmat = C2d(Storage(D2x(qmat+12),4))        /* next QMAT     QMAT+12  */
 sva=sva-65536                              /* 010006F -> 000006F     */
End                                         /*                        */
Return D2c(C2d(Storage(D2x(qmat+sva+1),4))+16) /* return address      */
/**********************************************************************/

/**********************************************************************/
/* DATA_HANDLING - Carry out whatever processing is required ...      */
/**********************************************************************/
DATA_HANDLING:                       /* 'Handle' the data produced  ##*/
If (csi_type /= '0') Then            /* processing non-catalog        */
 Do                                  /*                               */
  If (entype = 'ALIAS') Then         /* If entry is an ALIAS          */
   Do                                /*                               */
    alias_tot = alias_tot + 1        /*  increment total              */
    alias.alias_tot = entname        /*  save alias name              */
    alcat.alias_tot = name           /*  save alias catalog           */
    altyp.alias_tot = type           /*  save alias type              */
   End                               /*                               */
  Else                               /* otherwise                     */
   Do                                /*                               */
    ind_tot = ind_tot + 1            /*  increment individual counter */
   End                               /*                               */
 End                                 /*                               */
Return                               /*                               */
/**********************************************************************/

